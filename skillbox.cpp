// skillbox.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//
#include <Windows.h>
#include <iostream>
#include <string>
#include "skillbox.h"
#include <cmath>
/// <summary>
/// Скиллбокс дилаю уроке
/// </summary>
/// <returns></returns>
int main()
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	//1.2 Hello+Name 
		//std::cout << "Hello Misha!\n";
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	//1.3 Стишок
		//std::cout << "ОДНАЖДЫ, В СТУДЁНУЮ ЗИМНЮЮ ПОРУ\n";
		//std::cout << "Однажны, в студённую зимнюю пору\n";
		//std::cout << "Я из лесу вышел; был сильный мороз\n";
		//std::cout << "Гляжу, поднимается медленно в гору\n";
		//std::cout << "Лошадка, везущая хворосту воз\n";
		//std::cout << "НИКОЛАЙ НЕКРАСОВ\n";
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//1.5
		//std::cout <<"================ \n";
		//std::cout <<"Hello, \n";
		//std::cout << "World \n";
		//std::cout << "================ \n";

		//std::cout << "================================== \n";
		//std::cout << "||		Hello,		|| \n";
		//std::cout << "||		World 		||\n";
		//std::cout << "================================== \n";

		//std::cout << "================================== \n";
		//std::cout << "||				|| \n";
		//std::cout << "||				|| \n";
		//std::cout << "||		Hello,		|| \n";
		//std::cout << "||		World 		||\n";
		//std::cout << "||				|| \n";
		//std::cout << "||				|| \n";
		//std::cout << "================================== \n";
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	//2.2
		//float costApartment = 1200;
		//float sizeShoe = 36.5;
		//int countAnimals = 250;
		//float price = 1400;
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	//2.3
		//int numberCircle = 4;
		//int numberDriver = 358;
		//int speedDriver = 358;
		//int enginePower = 254;
		//int wheels = 93;
		//int wheelRulls = 49;
		//int wind = -21;
		//int rain = -17;
		//std::cout << "================================== \n";
		//std::cout << "Супер гонки. Круг " << numberCircle << "\n";
		//std::cout << "================================== \n";
		//std::cout << "Шумахер("<<numberDriver<<")\n";
		//std::cout << "Скорость: "<<speedDriver<<"\n";
		//std::cout << "---------------------------------- \n";
		//std::cout << "Оснащение\n";
		//std::cout << "Двигатель: +" << enginePower << "\n";
		//std::cout << "Колеса: +" << wheels << "\n";
		//std::cout << "Руль: + " << wheelRulls << "\n";
		//std::cout << "---------------------------------- \n";
		//std::cout << "Действия плохой погоды\n";
		//std::cout << "Ветер: " <<wind<<"\n" ;
		//std::cout << "Дождь: " << rain;
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	//2.5.1
	//Исправьте код программы так, чтобы значение скорости рассчитывалось автоматически.
	//Скорость — это сумма показателей Двигателя, Колес и Руля и минус показатели Дождя и Ветра.
		//int lap = 4;
		//int engine = 254;
		//int wheels = 93;
		//int steerinWheel = 49;
		//int wind = 21;
		//int rain = 17;
		//int speed = 358;
		//speed = engine + wheels + steerinWheel - wind - rain;
		//std::cout << "===================\n";
		//std::cout << "Супер гонки. Круг " << lap << "\n";
		//std::cout << "===================\n";
		//std::cout << "Шумахер (" << speed << ")\n";
		//std::cout << "===================\n";
		//std::cout << "Водитель: Шумахер\n";
		//std::cout << "Скорость: " << speed << "\n";
		//std::cout << "-------------------\n";
		//std::cout << "Оснащение\n";
		//std::cout << "Двигатель: +" << engine << "\n";
		//std::cout << "Колеса: +" << wheels << "\n";
		//std::cout << "Руль: +" << steerinWheel << "\n";
		//std::cout << "-------------------\n";
		//std::cout << "Действия плохой погоды\n";
		//std::cout << "Ветер: -" << wind << "\n";
		//std::cout << "Дождь: -" << rain << "\n";
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	//2.5.2
	//Напишите калькулятор для расчета полной стоимости товара. 
	//Она рассчитывается из стоимости самого товара плюс стоимость доставки минус скидка. 
	//Все значения сохраните в переменные и выводите в нужных местах, имитируя ввод данных.
		//int price;
		//int costDelivery;
		//int discount;
		//std::cout << "Введите стоимость товара: ";
		//std::cin >> price;
		//std::cout << "Введите стоимость доставки: ";
		//std::cin >> costDelivery;
		//std::cout << "Введите размер скидки: ";
		//std::cin >> discount;
		//std::cout << "----- Считаем -----\n";
		//std::cout << "Итого: "<<price+costDelivery-discount;
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	//2.5.3
	//Напишите программу для ресторана быстрого питания “Крылышки и ножки”.
	//Они хотят знать, какое количество клиентов успеет обслужить один кассир за рабочую смену.
	//Время на обслуживание складывается из времени, за которое клиент делает заказ, и времени, за которое кассир собирает заказ и выдает его клиенту.
	//Все расчеты проводите в минутах.Все значения сохраните в переменные и выводите в нужных местах, имитируя ввод данных.
		//int durationShift;
		//int durationOrderComplete;
		//int durationCollectionOrder;
		//int countClients;
		//std::cout << "Введите длительность смены в минутах: ";
		//std::cin >> durationShift;
		//std::cout << "Сколько минут клиент делает заказ? ";
		//std::cin >> durationOrderComplete;
		//std::cout << "Сколько минут собирает заказ? ";
		//std::cin >> durationCollectionOrder;
		//countClients = durationShift / (durationOrderComplete + durationCollectionOrder);
		//std::cout << "----- Считаем -----\n";
		//std::cout << "За сменой длинной "<<durationShift<<" минут кассир успеет обслужить "<<countClients << " клиентов";
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	//2.5.4
	//Управляющая компания рассылает странные квитанции : в них указана только полная стоимость 
	//ремонта многоквартирного дома.А сколько должна платить конкретная квартира — не понятно.
	//Напишите программу, с помощью которой жители квартир смогут посчитать, какую сумму им надо 
	//заплатить.Сумма поровну делится на все квартиры вне зависимости от площади, количества жильцов и 
	//комнат.Все значения сохраните в переменные и выводите в нужных местах, имитируя ввод данных.
		//int amountReceipt;
		//int countEntrance;
		//int apartmentsInEntrance;
		//int apartmentsHaveToPay;
		//std::cout << "Введите сумму, указанную в квитанции: ";
		//std::cin >> amountReceipt;
		//std::cout << "Сколько подъездов в вашем доме? ";
		//std::cin >> countEntrance;
		//std::cout << "Сколько квартир в каждом подъезде? ";
		//std::cin >> apartmentsInEntrance;
		//std::cout << "----- Считаем -----\n";
		//apartmentsHaveToPay = amountReceipt / (countEntrance*apartmentsInEntrance);
		//std::cout << "Каждая квартира должна заплатить по " << apartmentsHaveToPay <<" руб";
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//3.2.1. 
	//Оказывается, не все люди умеют вычислять квадрат чисел. А ведь это просто необходимо! Буквально каждый день, а то и не один раз, нам нужно вычислить квадрат какого-нибудь числа.
	//Напишите программу, которая вычисляет квадрат числа.
	//Пользователь должен ввести число(a), а программа выводит квадрат числа(a* a).
		//int numberInput;
		//int numberOutput;
		//std::cout << "Введите число, которое будем возводить в квадрат: ";
		//std::cin >> numberInput;
		//std::cout << "----- Считаем -----\n";
		//numberOutput = numberInput * numberInput;
		//std::cout << "Число " << numberInput << " в квадрате = " << numberOutput;
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//3.2.2
	//Задание 2. Теперь вернемся к программе с расчетом стоимости товара.
	//Измените ее так, чтобы пользователь мог вводить свои данные.
	//Переменные для хранения цены, стоимости доставки и скидки у нас уже есть, вам нужно дописать код, 
	//который будет записывать в них введенные пользователем числа.Не забудьте добавить подсказки, 
	//чтобы было понятно, что нужно вводить.
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//3.3.1
	//Напишите программу, в которой пользователю нужно ввести имя персонажа и расу, 
	//а программа выводит приветствие.
		//std::string raceCharacter;
		//std::string nameCharacter;
		//std::cout << "Введите расу персонажа: ";
		//std::cin >> raceCharacter;
		//std::cout << "Введите имя персонажа: ";
		//std::cin >> nameCharacter;
		//std::cout << "Родился новый " << raceCharacter << " ,его зовут " << nameCharacter << " Добро пожаловать в этот суровый мир!";
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//3.3.2
	//Напишите программу, которая требует ввести логин и пароль,
	//а после выводит сообщение об успешной регистрации.
		//std::string loginUser;
		//std::string passwordUser;
		//std::cout << "Введите логин: ";
		//std::cin >> loginUser;
		//std::cout << "Введите пароль: ";
		//std::cin >> passwordUser;
		//std::cout << loginUser << ", вы успешно зашли!";
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//3.5.1
	//Задача 1. Конструктор квестов
		//Напишите конструктор текстовых квестов.
		//Пользователь вводит названия планеты <Planet>, звездной системы <Star>, 
		//имя рейнджера <Ranger> и количество денег вознаграждения <Money>, 
		//программа генерирует текст квеста
		//std::string planet;
		//std::string star;
		//std::string nameRanger;
		//std::string money;
		//std::cout << "Введите название планеты: ";
		//std::cin >> planet;
		//std::cout << "Введите название звёздное системы: ";
		//std::cin >> star;
		//std::cout << "Введите имя рейнджера: ";
		//std::cin >> nameRanger;
		//std::cout << "Вознаграждение: ";
		//std::cin >> money;
		//std::cout << "Как вам, "<<nameRanger<<", известно, мы — раса мирная, поэтому на наших военных кораблях\nиспользуются наемники с других планет. Система набора отработана давным-давно.\nОбычно мы приглашаем на наши корабли людей с планеты "<<planet<< " системы "<<star << "\n";
		//std::cout << "Но случилась неприятность — в связи с большими потерями в последнее время престиж\nпрофессии сильно упал, и теперь не так-то просто завербовать призывников. Главный\nкомиссар планеты "<<planet<<", впрочем, отлично справлялся, но недавно его наградили\nорденом Сутулого с закруткой на спине, и его на радостях парализовало! Призыв под\nугрозой срыва!\n";
		//std::cout << nameRanger << ", вы должны прибыть на планету "<<planet<<" системы "<<star<<" и помочь выполнить\nплан призыва. Мы готовы выплатить вам премию в "<<money<<" кредитов за эту маленькую\nуслугу.";
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//3.5.2
	//Напишите программу, которая бы симулировала работу маршрутки. Она умеет объявлять остановки и узнавать у пользователя,
	//сколько человек вышло на этой остановке и сколько зашло. 
	//Работать она должна примерно так:
		//	std::string busStation = "Обь1";
		//	std::string busStation2 = "Обь2";
		//	std::string busStation3 = "Обь3";
		//	std::string busStation4 = "Обь4";
		//	int countPassenger = 0; //количество пассажиров
		//	int resultCountPassenger = 0;
		//	int passengerEnter; //временная переменная для вышедших
		//	int passengerLeft; //для зашедших
		//	int ticketPrice = 20; //цена билета
		//	int income; //заработок
		//	int fuel; //топливо
		//	int taxes; //налог
		//	int repairBus; 
		//	int incomeDriver;
		//	int incomeResult;
		//	std::cout << "Прибываем на остановку " << busStation << ".В салоне пассажиров: " << countPassenger << "\n";
		//	std::cout << "Сколько пассажиров вышло на остановке? ";
		//	std::cin >> passengerLeft;
		//	std::cout << "Сколько пассажиров зашло на остановке? ";
		//	std::cin >> passengerEnter;
		//	countPassenger += passengerEnter - passengerLeft;
		//	resultCountPassenger += passengerEnter;
		//
		//	std::cout << "Отправляемся с остановки " << busStation << ".В салоне пассажиров: " << countPassenger << "\n";
		//	std::cout << "----- Едем -----\n";
		//	std::cout << "Прибываем на остановку " << busStation2 << ".В салоне пассажиров: " << countPassenger << "\n";
		//	std::cout << "Сколько пассажиров вышло на остановке? ";
		//	std::cin >> passengerLeft;
		//	std::cout << "Сколько пассажиров зашло на остановке? ";
		//	std::cin >> passengerEnter;
		//	countPassenger += passengerEnter - passengerLeft;
		//	resultCountPassenger += passengerEnter;
		//
		//	std::cout << "Отправляемся с остановки " << busStation2 << ".В салоне пассажиров: " << countPassenger << "\n";
		//	std::cout << "----- Едем -----\n";
		//	std::cout << "Прибываем на остановку " << busStation3 << ".В салоне пассажиров: " << countPassenger << "\n";
		//	std::cout << "Сколько пассажиров вышло на остановке? ";
		//	std::cin >> passengerLeft;
		//	std::cout << "Сколько пассажиров зашло на остановке? ";
		//	std::cin >> passengerEnter;
		//	countPassenger += passengerEnter - passengerLeft;
		//	resultCountPassenger += passengerEnter;
		//	
		//	std::cout << "Отправляемся с остановки " << busStation3 << ".В салоне пассажиров: " << countPassenger << "\n";
		//	std::cout << "----- Едем -----\n";
		//	std::cout << "Прибываем на остановку " << busStation4 << ".В салоне пассажиров: " << countPassenger << "\n";
		//
		//	income = resultCountPassenger * ticketPrice;
		//	incomeDriver = income / 4;
		//	fuel = income / 5;
		//	taxes = income / 5;
		//	repairBus = income / 5;
		//	incomeResult = income - incomeDriver - fuel - taxes - repairBus;
		//	std::cout << "Всего заработали: " << income <<" руб\n";
		//	std::cout << "Зарплата водителя: " << incomeDriver << " руб\n";
		//	std::cout << "Расходы на топливо: " << fuel << " руб\n";
		//	std::cout << "Налоги: " << taxes << " руб\n";
		//	std::cout << "Расходы на ремонт машины: " << repairBus << " руб\n";
		//	std::cout << "Итого доход: " << incomeResult << " руб";
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//3.5.3
	/*
	int main() {
	int a = 42;
	int b = 153;
	std::cout << "a: " << a << "\n";
	std::cout << "b: " << b << "\n";
	}
	Есть код программы с двумя переменными типа int и выводом этих переменных на экран.
	Напишите программу, которая меняет значения переменных местами, то есть нужно добиться
	того, чтобы в переменной a лежало значение b, а в b - значение a.
	*/

	//int a = 42;
	//int b = 153;
	//a = a * b;	//42*153
	//b = a / b; //42
	//a = a / b; //153
	//std::cout << "a: " << a << "\n";
	//std::cout << "b: " << b << "\n";

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//3.5.4
	/*
На бамбуковой плантации завелись гусеницы. Они спят днем и едят бамбук ночью.
Бамбук генно-модифицированный и растет только при свете дня, зато очень быстро —
по 50 сантиметров ежедневно! Гусеницы съедают 20 из них каждую ночь.
Бамбуковые саженцы при высадке утром имеют высоту 1 метр. Напишите программу, которая:
1. Считает, какой высоты бамбук будет в середине третьего дня.
Усложнение — посчитайте это не за несколько подходов, а одной формулой.
2. Считает, сколько полных дней понадобится бамбуку, чтобы его можно было срубить и продать.
Для этого он должен вырасти до 3 метров.
Необязательная часть. Напишите такую же программу, но которая позволяла бы работать с
разными гусеницами и разными сортами бамбука.
Пользователь может ввести любую скорость роста бамбука, любую скорость его поедания
гусеницами, любую высоту саженца, любое количество дней (для первой части задания) и
любую целевую высоту взрослого бамбука (для второй части задания).
Примечание. Допускается погрешность в 1 сантиметр для первой части задания.
Для второй части напишите программу так, чтобы она считала, через какое минимальное количество
дней бамбук гарантированно созреет.
Все расчеты проводите в сантиметрах.
	*/
	//int heightBamboo = 100; //рост бамбука см
	//int caterpillarsEat = 20; //гусеницы едят см
	//int growingBamboo = 50; //рост бамбука утром см
	//int currentHeightBamboo; //мёртвый бамбук
	//int countDay; //кол-во дней
	//int targetBambo = 300;
	//int fullDay;
	////1я часть
	////currentHeightBamboo = 3*(heightBamboo + growingBamboo) - 2*caterpillarsEat;
	////1я апдейит
	//std::cout << "Введите рост саженца: ";
	//std::cin >> heightBamboo;
	//std::cout << "Введите сколько гусеницы будут есть ночью: ";
	//std::cin >> caterpillarsEat;
	//std::cout << "Введите сколько дней будет расти бамбук: ";
	//std::cin >> countDay;
	//std::cout << "Введите рост бамбука утром: ";
	//std::cin >> growingBamboo;
	//std::cout << "Введите целеовй рост бамбука: ";
	//std::cin >> targetBambo;
	//currentHeightBamboo = countDay * (heightBamboo + growingBamboo) - (countDay-1) * caterpillarsEat;
	//std::cout << "Саженец бамбука имеет рост: " << heightBamboo <<" см.\n";
	//std::cout << "Утром растёт на: " << growingBamboo << " см.\n";
	//std::cout << "Гусеницы ночью подъедают: " << caterpillarsEat << " см.\n";
	//std::cout << "Бамбук на середину "<<countDay<<" дня " << ",будет ростом " << currentHeightBamboo << " см.\n";
	//
	////2я часть
	//fullDay = (targetBambo-heightBamboo)/(growingBamboo - caterpillarsEat);
	//std::cout << "Количество полных дней, необходимых для сруба бамбука высотой " << targetBambo << " см. равно " << fullDay;
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//7.2.1
	/*
Задача 1. Калькулятор скидки.
Вы покупаете 3 товара в магазине.
Если сумма вашего чека превышает 10 000 руб,
вам будет сделана скидка 10%. Напишите программу которая запрашивает
3 стоимости товара и вычисляет сумму чека.
	*/
	//int costs = 0;
	//int costsCur;
	//std::cout << "Введите стоимость первого товара: ";
	//std::cin >> costsCur;
	//costs += costsCur;
	//std::cout << "Введите стоимость второго товара: ";
	//std::cin >> costsCur;
	//costs += costsCur;
	//std::cout << "Введите стоимость третьего товара: ";
	//std::cin >> costsCur;
	//costs += costsCur;
	//if (costs > 10000)
	//{
	//	costs = costs - (costs / 100 * 10);
	//	std::cout << "Стоимость вашей покупки с учётом скидки 10% составит: "<<costs;
	//}
	//else
	//	std::cout << "Стоимость вашей покупки составит: " << costs;
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	//7.2.2
		/*
		Автомобиль выехал из Москвы в Рязань. Напишите программу,
		которая вычисляет сумеет ли добраться автомобиль до Рязани
		за два часа с заданной пользователем средней скоростью движения.
		Программа должна выводить вычисленное расстояние, а если автомобиль
		сумеет добраться до Рязани, - сообщение “Вы приехали”. Расстояние между городами - 200 км.
		*/
		//int averageSpeed;
		//int distance = 200;
		//int time = 2;
		//std::cout << "Введите среднюю скорость: ";
		//std::cin >> averageSpeed;
		//if (averageSpeed * time >= distance)
		//{
		//	std::cout << "Вы приехали";
		//}
		//else
		//	std::cout << "Вы не доехали, оставшиеся расстояние: " << distance - averageSpeed * time << "км";
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	//7.2.3
		/*
		Автомобиль выехал из Москвы в Рязань. Напишите программу,
		которая вычисляет сумеет ли добраться автомобиль до Рязани
		за два часа с заданной пользователем средней скоростью движения.
		Программа должна выводить вычисленное расстояние, а если автомобиль
		сумеет добраться до Рязани, - сообщение “Вы приехали”. Расстояние между городами - 200 км.
		*/
		//int x;
		//std::cout << "Введите число: ";
		//std::cin >> x;
		//if (x < 0)
		//{
		//	x = -x;
		//	std::cout << "Чисто отрицательно - модуль числа будет равен: " << x;
		//}
		//else
		//	std::cout << "Чисто положительное равно: " << x;

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	//7.2.4
		/*
	В небольшом городке проживает 18 000 взрослых человек: 9 000 мужчин и 9 000 женщин.
	Согласно традиции этого городка все мужчины обязаны носить бороду. Один предприимчивый
	житель открыл сеть барбершопов, чтобы помочь мужчинам ухаживать за их бородами.
	Однако он никак не может посчитать сколько всего специалистов-барберов для этого того нужно.
	Вам нужно написать программу которая будет рассчитывать сколько мужчин можно постричь во
	всех барбершопах исходя из следующих данных:
	* каждый из 9000 мужчин посещает барбершоп раз в месяц (30 дней)
	* один барбер способен обслужить одного клиента за 1 час
	* смена барбера - 8 часов
	Программа должна спросить сколько мужчин проживает в городе и сколько всего барберов
	уже работает во всех барбершопах, и посчитать сколько барберов нужно, и если их
	недостаточно - выдать сообщение об этом. Если барберов достаточно - сказать и об этом.
	Подсказка: в конструкции условия можно сравнивать не только переменную с числом,
	но и две переменные! А еще - целые математические выражения. Например: if (a * b > c)
		*/
		//	int male;
		//	int timeBarberForOneClient = 1; // 1час
		//	int shiftBarber = 8; //8часов смена
		//	int countBarberCurrent;
		//	int days = 30;
		//	std::cout << "Сколько мужчин в городе? ";
		//	std::cin >> male;
		//	std::cout << "Сколько барберов работает в городе? ";
		//	std::cin >> countBarberCurrent;
		//
		//	if (countBarberCurrent * timeBarberForOneClient * shiftBarber * days >= male)
		//	{
		//		std::cout << "Барберов хватает";
		//	}
		//	else
		//		std::cout << "Барберов нехватает";

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	//7.4.1
		/*
Задача 1. Минимум из двух чисел.
Напишите программу, которая ищет минимум из двух чисел
		*/
		//int a;
		//int b;
		//std::cout << "Введите первое число: ";
		//std::cin >> a;
		//std::cout << "Введите второе число: ";
		//std::cin >> b;
		//if (a < b)
		//{
		//	std::cout << a << " < " << b;
		//}
		//else if (a > b)
		//{
		//	std::cout << a << " > " << b;
		//}
		//else
		//std::cout << a << " = " << b;


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

		//7.4.2
			/*
	Задача 2. Складываем в уме.

	Напишите программу которая проверяет то, как вы умеете складывать два числа в уме.
	Программа должна выводить два разных сообщения на верный и неверный ответ пользователя.
	В последнем случае надо показывать правильный результат.
			*/
			//int a;
			//int b;
			//int sum;
			//std::cout << "Введите первое число: ";
			//std::cin >> a;
			//std::cout << "Введите второе число: ";
			//std::cin >> b;
			//std::cout << "Какая сумма? ";
			//std::cin >> sum;
			//if (a + b == sum)
			//{
			//	std::cout << "Верно!";
			//}
			//else
			//std::cout << "Неверно! Правильный ответ = " << a+b;

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

		//7.4.3
			/*
	Задача 3. Проверка на чётное число.
	Напишите программу, которая проверяет, чётное ли число ввел пользователь.
	Подсказка: для проверки чётности используйте оператор %.
	Он вычисляет остаток от деления двух чисел. Пример:
	int remainder = x % 2; // вычисляет остаток от деления `x` на 2
			*/
			//int a;
			//std::cout << "Введите число для проверки чётности: ";
			//std::cin >> a;
			//if (a % 2 == 0)
			//{
			//	std::cout << "Число чётное ";
			//}
			//else
			//std::cout << "Число нечётное ";



//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

		//7.4.4
			/*
Напишите программу которая определяет уровень персонажа в компьютерной игре.
Пользователь вводит число "очков опыта", а программа вычисляет уровень.
Новый уровень даётся при достижении 1000, 2500 и 5000 "очков опыта".
Начальный уровень равен 1.
			*/
			//int level = 1;
			//int exp = 0;
			//std::cout << "Введите очки опыта: ";
			//std::cin >> exp;
			//if (exp >= 2500 && exp < 5000)
			//{
			//	level = 3;
			//}
			//else if (exp == 1000)
			//{
			//	level = 2;
			//}
			//else if (exp >= 5000)
			//{
			//	level = 4;
			//}
			//else
			//	level = level;
			//
			//std::cout << "Ваш уровень равен = " << level;
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

				//7.4.5
					/*
				Напишите программу, которая проверяет делится ли одно число на другое без остатка.
					*/
					//int a;
					//int b;
					//std::cout << "Введите 1 число для проверки чётности: ";
					//std::cin >> a;
					//std::cout << "Введите 2 число для проверки чётности: ";
					//std::cin >> b;
					//if (a % b == 0)
					//{
					//	std::cout << "Число " << a << " делится на число " << b << " без остатка";
					//}
					//else
					//std::cout << "Число " << a << " не делится на число " << b << " без остатка" << " Остаток = " << a%b;
			//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

					//7.4.6
						/*
					Помните задачу про барберов из урока 7.3? Кстати, именно оператор % мог помочь нам с
					барберами. Перепишите программу про них с его использованием для проверки на проблему
					с целочисленным делением.
						*/

						//int mansCount;
						//int barbersCount;
						//std::cout << "**********Барбершоп калькулятор**********\n";
						//std::cout << "Введите число мужчин в городе: ";
						//std::cin >> mansCount;
						//std::cout << "Сколько барберов удалось нанять: ";
						//std::cin >> barbersCount;
						//int mansPerBarber = 8;
						//int mansPerBarberPerMoth = mansPerBarber * 30;
						//std::cout << "Один барбер стрижет столько клиентов в месяц " << mansPerBarberPerMoth << "\n";
						//int requiredBarbersCount = mansCount / mansPerBarberPerMoth;
						//
						//if (mansCount % mansPerBarberPerMoth != 0)
						//{
						//	requiredBarbersCount += 1;
						//}
						//
						//std::cout << "Необходимое число барберов: " << requiredBarbersCount << "\n";
						//std::cout << requiredBarbersCount << " барбера могут подстричь " << requiredBarbersCount * mansPerBarberPerMoth << " мужчин за месяц\n";
						//
						//if (requiredBarbersCount > barbersCount) 
						//{
						//	std::cout << "Нужно больше барберов!\n";
						//}
						//if (requiredBarbersCount <= barbersCount) 
						//{
						//	std::cout << "Барберов хватает!\n";
						//}
						//std::cout << "Барберов нехватает";

				//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

						//7.4.7
							/*
				Задача 7. Меню ресторана.
				Напишите программу, которая выводит меню бизнес-ланча ресторана
				в зависимости от дня недели. В меню есть общая часть, а есть уникальная часть,
				которая зависит от дня недели. Пользователь должен ввести номер дня недели, -
				от 1 (понедельник) до 7 (воскресенье), а программа должна вывести на экран
				день недели и меню этого дня
							*/
							//int dayMenu;
							//std::cout << "************************************************\n";
							//std::cout << "* Добро пожаловать в ресторан Бродячие Тефтели *\n";
							//std::cout << "* Ознакомьтесь с меню бизнес-ланчей по дням:   *\n";
							//std::cout << "*                                              *\n";
							//std::cout << "* 1 - Понедельник                              *\n";
							//std::cout << "* 2 - Вторник                                  *\n";
							//std::cout << "* 3 - Среда                                    *\n";
							//std::cout << "* 4 - Четверг                                  *\n";
							//std::cout << "* 5 - Пятница                                  *\n";
							//std::cout << "* 6 - Суббота                                  *\n";
							//std::cout << "* 7 - Воскресенье                              *\n";
							//std::cout << "************************************************\n";
							//std::cout << "\nВведите номер дня недели: ";
							//std::cin >> dayMenu;
							//std::cout << "В бизнес ланч входит напиток, морковный салат а так же ";
							//if (dayMenu == 1) {
							//	std::cout << " Креветочная подлива - Эксклюзивно по понедельникам\n";
							//}
							//else if (dayMenu == 2) {
							//	std::cout << " Чебурек от Армена - Эксклюзивно по вторникам\n";
							//}
							//else if (dayMenu == 3) {
							//	std::cout << " Плов с тефтелями - Эксклюзивно по средам\n";
							//}
							//else if (dayMenu == 4) {
							//	std::cout << " Недожаренный стэйк - Эксклюзивно по четвергам\n";
							//}
							//else if (dayMenu == 5) {
							//	std::cout << " Второй морковный салат - Эксклюзивно по пятницам\n";
							//}
							//else if (dayMenu == 6) {
							//	std::cout << " Скат на гриле - Эксклюзивно по субботам\n";
							//}
							//else if (dayMenu == 7) {
							//	std::cout << " Кружечка темного пива - Эксклюзивно по воскресеньям\n";
							//}
							//else {
							//	std::cout << " мы увидели, что от голода вы ошиблись с правильным вводом дня!\n";
							//}


					//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

							//7.4.8
								/*
					Задача 8. Зарплата (необязательная).
					В отделе маркетинга работают 3 сотрудника. Их зарплаты могут быть как разными, так и
					одинаковыми. Напишите программу, которая вычисляет разницу между самой высокой и
					низкой зарплатой сотрудника, а также среднюю арифметическую зарплату отдела.
								*/
								//int salaryEmployer1;
								//int salaryEmployer2;
								//int salaryEmployer3;
								//int max = 0;
								//int min = 0;
								//int aveSalery;
								//int diffSalery;
								//std::cout << "Зарплата первого сотрудника: ";
								//std::cin >> salaryEmployer1;
								//std::cout << "Зарплата вторника сотрудника: ";
								//std::cin >> salaryEmployer2;
								//std::cout << "Зарплата третьего сотрудника: ";
								//std::cin >> salaryEmployer3;
								//if (salaryEmployer1 > salaryEmployer2)
								//{
								//	max = salaryEmployer1;
								//}
								//else if (salaryEmployer3 > salaryEmployer2)
								//{
								//	max = salaryEmployer3;
								//}
								//else max = salaryEmployer2;
								//
								//
								//if (salaryEmployer1 < salaryEmployer2)
								//{
								//	min = salaryEmployer1;
								//}
								//else if (salaryEmployer3 < salaryEmployer2)
								//{
								//	min = salaryEmployer3;
								//}
								//else min = salaryEmployer2;
								//
								//diffSalery = max - min;
								//aveSalery = salaryEmployer1 + salaryEmployer2 + salaryEmployer3;
								//aveSalery = aveSalery / 3;
								//std::cout << "Разница между самой высокой и низкой зарплатой сотрудника в отделе: " << diffSalery<< "\n";
								//std::cout << "Среднее арифметическая зарплата отдела: " << aveSalery;



					//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

							//7.4.9
								/*
					Задача 9. Прогрессивный налог (необязательная).
					В последнем уроке мы писали программу, вычисляющую сумму налога
					по прогрессивной шкале в зависимости от полученного заработка: 13% на доход до 10000,
					20% на доход от 10000 до 50000, 30% на доход выше 50000.
					Однако во многих странах, использующих такую шкалу, эта сумма
					вычисляется более сложным способом. А именно, налоговая ставка 30% на доход
					выше 50000 означает, что 30% уплачивается не со всей суммы, а лишь с той ее части,
					которая превосходит 50000. Аналогично, ставка 20% на доход от 10000 до 50000 обязывает
					уплатить 20% лишь с той части суммы, которая превосходит 10000, но не превосходит 50000.
					Так, например, с дохода 100000 придется заплатить такой налог:
					30% * (100000-50000) + 20% * (50000-10000) + 13% * 10000 = 15000+8000+1300=24300.
					А с дохода 30000 - такой: 20% * (30000-10000) + 13% * 10000 = 4000+1300=5300.
					Напишите программу, которая спрашивает у пользователя его доход и рассчитывает сумму
					налога для него по вышеописанным правилам.
								*/

								//int incomeUser = 0;
								//int highIncome = 50000;
								//int aveIncome = 10000;
								//int amountTaxResult = 0;
								//int amountTaxHigh = 30;
								//int amountTaxAve = 20;
								//int amountTaxLow = 13;
								//
								//std::cout << "Введите ваш доход: ";
								//std::cin >> incomeUser;
								//
								//if (incomeUser > highIncome)
								//{
								//	amountTaxResult = ((amountTaxHigh*(incomeUser-highIncome))/100) + ((amountTaxAve*(highIncome-aveIncome))/100)+ ((amountTaxLow*aveIncome)/100);
								//}
								//else if (incomeUser >= aveIncome)
								//{
								//	amountTaxResult = ((amountTaxAve * (highIncome - aveIncome)) / 100) + ((amountTaxLow * (aveIncome)) / 100);
								//}
								//else
								//{
								//	amountTaxResult = ((amountTaxLow * (aveIncome)) / 100);
								//}
								//std::cout << "Ваш налог равен = " << amountTaxResult;

							//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

									//8.2.1
										/*
							Задача 1. Координатная плоскость.
							Напишите программу, которая принимает на вход координаты X,
							Y некоторой точки на плоскости и отвечает, в какой четверти
							плоскости лежит эта точка (а если она лежит на границе двух
							четвертей — то так и отвечает “на границе”). Напомним, что четверти
							на плоскости нумеруются так: первая четверть — если обе координаты
							положительны, вторая — если X отрицателен, а Y положителен, третья —
							если обе координаты отрицательны, четвертая — если X положителен, а Y отрицателен.
							Точка лежит на границе четвертей, если хотя бы какая-то из ее координат равна нулю.
										*/

										//int x;
										//int y;
										//std::cout << "Введите x: ";
										//std::cin >> x;
										//std::cout << "Введите y: ";
										//std::cin >> y;
										//if (x > 0)
										//{
										//	if (y > 0)
										//	{
										//		std::cout << "Первая четверть";
										//	}
										//	else if(y<0)
										//	{
										//		std::cout << "Четвертая четверть";
										//	}
										//	else
										//	{
										//		std::cout << "На границе";
										//	}
										//}
										//else if (x < 0)
										//{
										//	if (y < 0)
										//	{
										//		std::cout << "Третья четверть";
										//	}
										//	else if(y>0)
										//	{
										//		std::cout << "Вторая четверть";
										//	}
										//	else 
										//	{
										//		std::cout << "На границе";
										//	}
										//}


								//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

										//8.2.2
											/*
								Задача 2. Банкомат.
								Пользователи банкомата хотят снимать деньги.
								Но банкомат умеет выдавать только купюры по 100 рублей, а максимальная
								сумма снятия — 100 000 рублей.
								Напишите программу, которая проверяет допустимость суммы средств, введенной пользователем.
											*/
											//int userMoney;
											//int maxMoney = 100000;
											//int minGiveMoney = 100;
											//std::cout << "Сколько денег снять? ";
											//std::cin >> userMoney;
											//if (userMoney % 100 == 0)
											//{
											//	if (userMoney <= 100000)
											//	{
											//		std::cout << "Вы сняли: " << userMoney << " рублей";
											//	}
											//	else
											//		std::cout << "Сумма привысила лимит";
											//}
											//else
											//std::cout << "Автомат выдаёт только по 100 рублей";

								//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

										//8.2.3
											/*
								Задача 3. Високосный год (необязательная).
								Напишите программу, которая определяет количество дней в году.
								Подсказка: номер года должен делиться на 4, однако если он делится на 100, но не
								делится на 400, то год не високосный!
											*/
											//int year;
											//std::cout << "Введите номер года ";
											//std::cin >> year;
											//if (year % 4 == 0)
											//{
											//	if (year % 100 == 0)
											//	{
											//		if (year % 400 != 0)
											//		{
											//			std::cout << "Год невисокосный!";
											//		}
											//		else
											//			std::cout << "Год високосный!";
											//	}
											//	else
											//		std::cout << "Год високосный!";
											//}
											//else
											//	std::cout << "Год не високосный!";

								//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

										//8.3.1
											/*
								Задача 1. Координатная плоскость.
								Напишите программу, которая принимает на вход координаты X,
								Y некоторой точки на плоскости и отвечает, в какой четверти
								плоскости лежит эта точка (а если она лежит на границе двух
								четвертей — то так и отвечает “на границе”). Напомним, что четверти
								на плоскости нумеруются так: первая четверть — если обе координаты
								положительны, вторая — если X отрицателен, а Y положителен, третья —
								если обе координаты отрицательны, четвертая — если X положителен, а Y отрицателен.
								Точка лежит на границе четвертей, если хотя бы какая-то из ее координат равна нулю.
											*/

											//	int x;
											//	int y;
											//	std::cout << "Введите x: ";
											//	std::cin >> x;
											//	std::cout << "Введите y: ";
											//	std::cin >> y;
											//	if (x > 0 && y > 0)
											//	{
											//		std::cout << "Первая четверть";
											//	}
											//	else if (x > 0 && y < 0)
											//	{
											//		std::cout << "Четвертая четверть";
											//	}
											//	else if (x < 0 && y > 0)
											//	{
											//
											//		std::cout << "Вторая четверть";
											//	}
											//	else if (x < 0 && y < 0)
											//	{
											//		std::cout << "Третья четверть";
											//	}
											//	else
											//		std::cout << "На границе";



										//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

												//8.3.1
													/*
										Задача 2. Банкомат.
										Пользователи банкомата хотят снимать деньги.
										Но банкомат умеет выдавать только купюры по 100 рублей, а максимальная
										сумма снятия — 100 000 рублей.
										Напишите программу, которая проверяет допустимость суммы средств, введенной пользователем.
													*/
													//	int userMoney;
													//	int maxMoney = 100000;
													//	int minGiveMoney = 100;
													//	std::cout << "Сколько денег снять? ";
													//	std::cin >> userMoney;
													//	if (userMoney % 100 == 0 && userMoney <= 100000)
													//	{	
													//			std::cout << "Вы сняли: " << userMoney << " рублей";
													//	}
													//	else
													//	{
													//		std::cout << "Сумма привысила лимит";
													//		std::cout << "Автомат выдаёт только по 100 рублей";
													//	}


											//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

													//8.3.1
														/*
											Задача 3. Високосный год (необязательная).
											Напишите программу, которая определяет количество дней в году.
											Подсказка: номер года должен делиться на 4, однако если он делится на 100, но не
											делится на 400, то год не високосный!
														*/
														//int year;
														//std::cout << "Введите номер года ";
														//std::cin >> year;
														//if (year % 4 == 0)
														//{
														//	if (year % 100 == 0 && year % 400 != 0)
														//	{
														//		std::cout << "Год невисокосный!";
														//		
														//	}
														//	else
														//		std::cout << "Год високосный!";
														//}
														//else
														//	std::cout << "Год не високосный!";


											//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

													//8.3.2
														/*
											Задача 2. Мост и перегрузка.
										Через мост разрешено проезжать машинам с массой не больше 1200 килограмм.
										Для контроля на каждой полосе на въезде расположены весы. Одновременно на мост въезжает 4 машины.
										Напишите программу, которая получает 4 числа — массу въезжающих машин — и сообщает,
										есть ли среди них хоть одна, вес которой превышает 1200 килограмм.
														*/
														//int first;
														//int two;
														//int three;
														//int four;
														//int stopWeight = 1200;
														//std::cout << "1 машина весит: ";
														//std::cin >> first;
														//std::cout << "2 машина весит: ";
														//std::cin >> two;
														//std::cout << "3 машина весит: ";
														//std::cin >> three;
														//std::cout << "4 машина весит: ";
														//std::cin >> four;
														//if (first > 1200 || two > 1200 || three > 1200 || four > 1200)
														//{
														//	std::cout << "Одна из четырёх машин привышает вес! ";
														//}

											//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
											//8.3.3
															/*
											У меня есть три деревянных палочки, длины этих палочек равны A, B и C.
											Напишите программу, которая по данным длинам определяет, можно ли из этих трех палочек
											сложить треугольник.
											Подсказка: треугольник сложить нельзя, если суммарная длина каких-либо двух
											палочек меньше или равна длины оставшейся палочки.
															*/
															//int a, b, c;
															//std::cout << "Введите длину A: ";
															//std::cin >> a;
															//std::cout << "Введите длину B: ";
															//std::cin >> b;
															//std::cout << "Введите длину C: ";
															//std::cin >> c;
															//
															//if (a + b <= c || a + c <= b || b + c <= a)
															//{
															//	std::cout << "Треугольник не получится! =( ";
															//}
															//else std::cout << "Треугольник получился! = )";

															//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
															//8.3.4
																			/*
															Задача 4. Совпадение чисел(необязательная).
															Напишите программу, которая по трем введенным числам a, b, c определяет,
															сколько среди них совпадающих чисел.
															Подсказка: Совпадающих может быть 0, 2 или 3.
															Например, если введены числа 5 1 5, то ответ должен быть “2 совпадающих”,
															если -1 -2 -3, то ответ должен быть “0 совпадающих”.
																			*/
																			//int a, b, c;
																			//int i;
																			//std::cout << "Введите длину A: ";
																			//std::cin >> a;
																			//std::cout << "Введите длину B: ";
																			//std::cin >> b;
																			//std::cout << "Введите длину C: ";
																			//std::cin >> c;
																			//
																			//if (a == b && b == c)
																			//{
																			//	i = 3;
																			//}
																			//else if (a == b && b != c || a == c && c!=b || c == b && b !=a)
																			//{
																			//	i = 2;
																			//}
																			//else i = 0;
																			//
																			//std::cout <<i<< " совпадающих";

																			//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																			//8.4.1
																							/*
																			Задача 1. Военкомат.
																			Для отбора летчиков устанавливаются жесткие критерии.
																			Напишите программу, проверяющую, подходит ли призывник.
																			Его рост должен быть не меньше 145см и не больше 165см, вес не меньше 45кг и не больше 65кг,
																			а количество рук и ног должно обязательно совпадать (мы не знаем, зачем, но так требует инструкция)
																			. При этом берут любого человека, налетавшего на самолетах больше 100 часов.
																			Дополнительно.
																			А еще зеленоглазых в летчики тоже не берут, поэтому проверьте и цвет их глаз.
																			Подсказка: для цвета глаз используйте строковый тип данных. Проверять строки на равенство можно так:
																			if (eyeColor == “серо-буро-малиновый”) { … }
																							*/
																							//int heightMan;
																							//int widthMan;
																							//int countHands;
																							//int countFoots;
																							//int countFlyOnAir;
																							//std::string eyeColor;
																							//
																							//
																							//std::cout << "Введите рост призывника: ";
																							//std::cin >> heightMan;
																							//std::cout << "Введите вес призывника: ";
																							//std::cin >> widthMan;
																							//std::cout << "Введите количество рук призывника: ";
																							//std::cin >> countHands;
																							//std::cout << "Введите количество ног призывника: ";
																							//std::cin >> countFoots;
																							//std::cout << "Введите количество налетавших часов на самолёте: ";
																							//std::cin >> countFlyOnAir;
																							//std::cout << "Введите цвет глаз призывника: ";
																							//std::cin >> eyeColor;
																							//
																							//if (heightMan < 145 || heightMan>165 || widthMan > 165 || widthMan < 65 || countFoots != countHands || eyeColor == "зелёный")
																							//{
																							//	if (countFlyOnAir > 100)
																							//	{
																							//		std::cout << "Вы приняты в войска Оби!";
																							//	}
																							//	else
																							//		std::cout << "Не годен!";
																							//}
																							//else std::cout << "Вы приняты в войска Оби!";

																					//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																					//8.4.2
																									/*
																					Задача 2. — Входит... И выходит... И входит... Замечательно выходит! "Винни-Пух и день забот".
																					У Винни-Пуха есть кирпич размера A на B на C. А еще есть стена, в которой проделано
																					прямоугольное отверстие размера X на Y. Прежде чем подарить все это ослику Иа,
																					Винни-Пух хочет знать, получится ли просунуть этот кирпич в это отверстие?
																					Напишите программу, которая по данным пяти числам отвечает на этот вопрос.
																					Разумеется, кирпич можно поворачивать.
																									*/
																									//int a, b, c, x, y;
																									//int square;
																									//std::cout << "Введите длину A: ";
																									//std::cin >> a;
																									//std::cout << "Введите длину B: ";
																									//std::cin >> b;
																									//std::cout << "Введите длину C: ";
																									//std::cin >> c;
																									//std::cout << "Введите X: ";
																									//std::cin >> x;
																									//std::cout << "Введите Y: ";
																									//std::cin >> y;
																									//
																									//square = x * y;
																									//
																									//if (a * b > square || a * c > square || b * c > square)
																									//{
																									//	std::cout << "Кирпич не войдёт! ";
																									//}
																									//else std::cout << "Кирпич войдёт!";
																						//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																						//8.4.3
																										/*
																						В макдональдсе продаются макнаггетсы в коробках по 6 и по 9 штук.
																						Вася хочет купить ровно N макнаггетсов. Напишите программу, которая по данному числу
																						N проверяет, получится ли у него это сделать.
																						Подсказка: Например, если N=5, ответ нет. Можно купить минимум 6 штук, но не 5.
																						Если N=21, ответ да. Можно купить 2 коробки по 6 штук и одну коробку по 9 штук,
																						в сумме получится ровно 21.
																										*/
																										//int maknaggetsN;
																										//int smallBoxNaggets = 6;
																										//int bigBoxNaggets = 9;
																										//std::cout << "Сколько макнаггетсов будем? ";
																										//std::cin >> maknaggetsN;
																										//if (maknaggetsN >= 6 && maknaggetsN % (bigBoxNaggets - smallBoxNaggets) == 0) {
																										//	std::cout << "Делишенс!";
																										//}
																										//else std::cout << "Нет";
																								//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																								//8.6.1
																												/*
																								Задача 1. Военный фельдшер.
																								Напишите программу, проверяющую, достаточно ли снаряжения у
																								фельдшера для выхода на работу с ранеными. Для этого ему нужно иметь при себе не менее
																								2 000 мл медицинского спирта или не менее 5 наборов походных аптек.
																												*/
																												//int mlMedicalAlcohol;
																												//int countMedicineChest;
																												//std::cout << "Введите количество: медицинского спирта: ";
																												//std::cin >> mlMedicalAlcohol;
																												//std::cout << "Введите количество аптечек: ";
																												//std::cin>>countMedicineChest;
																												//if (mlMedicalAlcohol >= 2000 && countMedicineChest >= 5)
																												//{
																												//	std::cout<<"Готов";
																												//}else std::cout << "Не готов";
																									//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																									//8.6.2
																													/*
																									Задача 2. Полет нормальный!
																									Напишите программу для аэропорта, проверяющую, правильным ли эшелоном летит самолет.
																									Его скорость должна быть в диапазоне от 750 до 850 км/ч,
																									а высота — в диапазоне от 9 000 до 9 500 метров.
																													*/
																													//int speedFly;
																													//int heightFly;
																													//int maxSpeedFly = 850;
																													//int minSpeedFly = 750;
																													//int maxHeightFly = 9500;
																													//int minHeightFly = 9000;
																													//std::cout << "Какая скорость? ";
																													//std::cin >> speedFly;
																													//std::cout << "Какая высота? ";
																													//std::cin >> heightFly;
																													//if (speedFly >= minSpeedFly && speedFly <= maxSpeedFly && heightFly >= minHeightFly && heightFly <= maxHeightFly) {
																													//	std::cout << "Готов";
																													//}
																													//else std::cout << "Не готов!";
																											//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																											//8.6.3
																															/*
																											Задача 3. Майские!
																											Напишите программу-календарь для мая месяца.
																											Она должна проверять введенный номер дня и сообщать, выходной этот день или рабочий.
																											Выходными считаются все субботы и воскресенья, а также даты с 1 по 5 число и с 8 по 10
																											число включительно. Наш месяц всегда начинается с понедельника
																															*/
																															//int day;
																															//std::cout << "Введите номер дня: ";
																															//std::cin >> day;
																															//
																															//if (day >= 1 && day <= 31)
																															//{
																															//	if (day >= 1 && day <= 5 || day >= 8 && day <= 10 || day%7 == 0 ||(day+1)%7 == 0 )
																															//	{
																															//		std::cout << day << " Выходный";
																															//	}
																															//	else std::cout << day << " Рабочий!";
																															//}
																															//else std::cout << "Такого дня нету!";




																													//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																													//8.6.4
																																	/*
																													Задача 4. Майские — усложнение.
																													Добавьте возможность начать месяц с любого дня недели.
																													Для этого вводится число — номер дня недели, с которого начинается месяц.
																													Убедитесь, что введенное число корректно.
																																	*/
																																	//int day;
																																	//int numberWeek = 0;
																																	//std::cout << "Введите номер дня недели: ";
																																	//std::cin >> numberWeek;
																																	//std::cout << "Введите номер дня: ";
																																	//std::cin >> day; //5
																																	//if(day >= 1 && day <= 31)
																																	//{
																																	//	if (day >= 1 && day <= 5 || day >= 8 && day <= 10 || (day+numberWeek) % 7 == 0 || (day - 1 + numberWeek) % 7 == 0)
																																	//	{
																																	//		std::cout << day << " Выходный";
																																	//	}
																																	//	else std::cout << day << " Рабочий!";
																																	//}
																																	//else std::cout << "Такого дня нету!";

																														//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																														//8.6.5
																																		/*
																														Задача 5. Склонение русских слов.
																														Напишите программу для магазина, которая по заданной цене товара дописывает
																														к нему слово “рубли” в правильном падеже. Например, если вводится число 2000,
																														то ответ должен быть “2000 рублей”, если 22 — то “22 рубля”, если 51 — то “51 рубль”.
																														Постарайтесь сделать свою программу по возможности лаконичнее.
																																		*/
																																		//int money;
																																		//std::cout << "Введите колиечство денег: ";
																																		//std::cin >> money;
																																		//int ten = money % 10;
																																		//int hundreds = money % 100;
																																		//if (money%10 == 1 && money != 11) {
																																		//	std::cout << money << " рубль";
																																		//}
																																		//else if ((hundreds >= 10 && hundreds <= 19) || (ten >= 5 && ten <= 9) || ten == 0) {
																																		//	std::cout <<money << " рублей";
																																		//}
																																		//else if (ten >= 2 && ten <= 4) {
																																		//	std::cout <<money << " рубля";
																																		//}
																																//1 рубль
																																//2 рубля
																																//3 рубля
																																//4 рубля
																																//5 рублей
																																//6 рублей
																																//7 рублей
																																//8 рублей
																																//9 рублей
																																//10 рублей
																																//11 рублей
																																//12 рублей
																																//13 рублей
																																//14 рублей
																																//15 рублей
																																//16 рублей
																																//17 рублей
																																//18 рублей
																																//19 рублей
																																//20 рублей
																																//21 рубль 22 рубля 23 рубля 24 рубля 25 рублей 26 рублей 27 рублей 28 рублей 29 рублей 30 рублей 31 рубль 32 рубля 33 рубля


																																//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																																//8.6.6
																																				/*
																																Задача 6. Усложнение задачи про кирпич.
																																На уроке мы с вами писали программу для проверки, удастся ли засунуть кирпич данных
																																размеров в данное прямоугольное отверстие. Теперь представьте, что у вас имеется
																																коробка размером A x B x C и другая коробка размером M x N x K.
																																Напишите программу, которая по шести данным числам A, B, C, M, N, K проверяет,
																																можно ли первую коробку положить внутрь второй. Разумеется, коробки можно как угодно
																																переворачивать, но одна коробка должна помещаться в другую целиком. Как обычно,
																																постарайтесь сделать свою программу по возможности лаконичнее.
																																				*/
																																				//int a, b, c, m, n, k;
																																				//std::cout << "Введите габариты первой коробки! \n";
																																				//std::cout << "Введите A: ";
																																				//std::cin >> a;
																																				//std::cout << "Введите B: ";
																																				//std::cin >> b;
																																				//std::cout << "Введите C: ";
																																				//std::cin >> c;
																																				//std::cout << "\nВведите габариты второй коробки! \n";
																																				//std::cout << "Введите M: ";
																																				//std::cin >> m;
																																				//std::cout << "Введите N: ";
																																				//std::cin >> n;
																																				//std::cout << "Введите K: ";
																																				//std::cin >> k;
																																				////if (a * b * c <= m * n * k) {
																																				////	std::cout << "Влезет";
																																				////}
																																				////else std::cout << "Не влезет!";
																																				//
																																				//if ((a < m && b < n && c < k)||(a < m && b < k && c < n)||(a < n && b < m && c < k)||(a < n && b < k && c < m)||(a < k && b < n && c < m)||(a < k && b < m && c < n)){
																																				//	std::cout << "Влезет";
																																				//} else std::cout << "Не влезет";

																																		//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																																		//8.6.7
																																						/*
																																		Задача 7. Банкомат-2.
																																		Однажды Вася подошел к банкомату и захотел обналичить N рублей.
																																		В банкомате есть купюры достоинством 100, 200, 500, 1000, 2000 и 5000 рублей.
																																		Банкомат хочет выдать Васе запрошенную сумму, обойдясь как можно меньшим числом
																																		купюр.
																																		Напишите программу для банкомата, которая по заданному числу N решает,
																																		сколько купюр каждого номинала нужно выдать для получения суммы ровно N рублей,
																																		либо говорит, что выдать ровно N рублей невозможно (например, если N не делится
																																		на 100). В качестве дополнительного ограничения учтите, что банкомат не
																																		может выдать за раз более 150 000 рублей, при попытке запросить такую сумму должно
																																		быть выдано сообщение об ошибке.
																																		Если можно выдать запрошенную сумму разными способами, которые не отличаются
																																		по суммарному количеству купюр, разрешается вывести любой из них.
																																		Например, 800 рублей можно выдать как 4 по 200 или как 500 и еще 3 по 100.
																																					*/
																																					//int moneyN;
																																					//int moneyOstatok;
																																					//int maxMoney = 150000;
																																					//int countNominal = 0;
																																					//int hundred = 100;
																																					//int twoHundred = 200;
																																					//int fiveHundred = 500;
																																					//int thousand = 1000;
																																					//int twoThousand = 2000;
																																					//int fiveThousand = 5000;
																																					//std::cout << "Вася сколько денег снять? ";
																																					//std::cin >> moneyN;
																																					//moneyOstatok = moneyN;
																																					//if (moneyN < maxMoney && moneyN % hundred == 0 && moneyN>0) {
																																					//	if (moneyOstatok - fiveThousand>=0) {
																																					//		countNominal = moneyN / fiveThousand;
																																					//		moneyOstatok -= countNominal*fiveThousand;
																																					//		std::cout << countNominal << " купюра по " << fiveThousand << "\n";
																																					//	}
																																					//	if (moneyOstatok - twoThousand >= 0){	
																																					//		countNominal = moneyOstatok / twoThousand;
																																					//		moneyOstatok -= countNominal*twoThousand;
																																					//		std::cout << countNominal << " купюра по " << twoThousand << "\n";
																																					//	}
																																					//	if (moneyOstatok - thousand >= 0) {
																																					//		countNominal = moneyOstatok / thousand;
																																					//		moneyOstatok -= countNominal*thousand;
																																					//		std::cout << countNominal << " купюра по " << thousand << "\n";
																																					//	}
																																					//	if (moneyOstatok - fiveHundred >= 0) {
																																					//		countNominal = moneyOstatok / fiveHundred;
																																					//		moneyOstatok -= countNominal * fiveHundred;
																																					//		std::cout << countNominal << " купюра по " << fiveHundred << "\n";
																																					//	}
																																					//	if (moneyOstatok - twoHundred >= 0) {
																																					//		countNominal = moneyOstatok / twoHundred;
																																					//		moneyOstatok -= countNominal * twoHundred;
																																					//		std::cout << countNominal << " купюра по " << twoHundred << "\n";
																																					//	}
																																					//	if (moneyOstatok - hundred >= 0) {
																																					//		countNominal = moneyOstatok / hundred;
																																					//		moneyOstatok -= countNominal * hundred;
																																					//		std::cout << countNominal << " купюра по " << hundred << "\n";
																																					//	}
																																					//}
																																					//else std::cout << "Ошибка!";

																																					//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																																					//8.6.8
																																									/*
																																					Задача 8. Грустное совершеннолетие.
																																					Посетитель пришел в бар и попросил кружку пива. Напишите программу для бармена,
																																					который не умеет считать, чтобы по заданной дате рождения посетителя и текущей дате
																																					определить, можно ему продавать алкоголь или нет. Программа должна попросить ввести
																																					сегодняшнюю дату и дату рождения покупателя, после чего ответить: “можно” или “нельзя”.
																																					Учтите, что в день 18-летия алкоголь продавать посетителю еще нельзя,
																																					а вот на следующий день после этого — уже можно.
																																					Как обычно, постарайтесь сделать свою программу по возможности лаконичнее.
																																								*/
																																								//int currentDay;
																																								//int currentMonth;
																																								//int currentYear;
																																								//int dayBirth;
																																								//int monthBirth;
																																								//int yearBirth;
																																								//std::cout << "Введите сегодняшнюю дату день месяц год: ";
																																								//std::cin >> currentDay >> currentMonth >> currentYear;
																																								//std::cout << "Введите дату рождения день месяц год: ";
																																								//std::cin >> dayBirth >> monthBirth >> yearBirth;
																																								//if (dayBirth > 30 && dayBirth < 1 || monthBirth>12 && monthBirth < 1 || yearBirth>0 && yearBirth > currentYear)
																																								//{
																																								//	std::cout << "Некорректная дата!";
																																								//}
																																								//else if (currentYear - yearBirth == 18 && currentDay == dayBirth && currentMonth == monthBirth) {
																																								//	std::cout << "Пиво пить в день рождение нельзя!!!";
																																								//}
																																								//else if (currentYear - yearBirth >= 18)
																																								//{
																																								//	std::cout << "Пиво пьём!!!";
																																								//}
																																								//else std::cout << "Иди домой школьник!";

																																					//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																																					//8.6.9
																																									/*
																																					Задача 9. Треугольник на координатной плоскости.
																																					Проверьте, образуют ли треугольник три данные точки на координатной плоскости.
																																					Каждая точка задается двумя координатами. Таким образом, на вход программе
																																					дается 6 чисел: координаты первой точки, затем координаты второй точки и
																																					координаты третьей точки. Программа должна ответить “Yes”,
																																					если три данные точки задают треугольник, и “No” иначе.
																																					Например, если хотя бы две из данных точек совпадают,
																																					то треугольника данные три точки не образуют.
																																					Другой пример: точки с координатами (1; 2), (3; 6) и (-2; -4)
																																					не образуют треугольника, поскольку они лежат на одной прямой, хоть и не совпадают.
																																					Постарайтесь сделать свою программу по возможности лаконичнее.
																																					Подсказка. Три точки А, B и С будут лежать на одной прямой,
																																					если совпадают углы наклона
																																					прямых, проведенных через любые две пары точек (например, совпадают прямые АВ и ВС).
																																					Угол можно проверить с помощью формулы (a-x)/(b-y), где a и b — координаты первой точки, а x и y — координаты второй.
																																								*/
																																								//int Ax, Ay, Bx, By, Cx, Cy;
																																								//std::cout << "Введите координаты первой точки: ";
																																								//std::cin >> Ax >> Ay;
																																								//std::cout << "Введите координаты второй точки: ";
																																								//std::cin >> Bx >> By;
																																								//std::cout << "Введите координаты третьей точки: ";
																																								//std::cin >> Cx >> Cy;
																																								//
																																								//if ((Ax == Bx && Ay == By) || (Bx == Cx && By == Cy) || (Ax == Cx && Ay == Cy) ||
																																								//	((Ax - Bx) / (Ay - By)) == (Cx / Cy)){
																																								//	std::cout << "Точки совпадают!!!";
																																								//}
																																								//else std::cout << "Получиться!";

																																						//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																																						//9.2.1
																																						/*
																																						Задача 1. Начальник.

																																						Напишите программу для робота-начальника.
																																						Он спрашивает у пользователя, выполнил ли он задания,
																																						которые выдавал вчера, и продолжает это делать до тех пор,
																																						пока тот не ответит ему “Да, конечно, сделал”.
																																						Подсказка 1: строки можно сравнивать вот так:
																																						(answer == “Да, конечно, сделал”), где answer — переменная с типом std::string
																																						Подсказка 2: чтобы считать строку с пробелами,
																																						воспользуйтесь функцией std::getline(std::cin, line);"
																																						*/
																																						//std::string answer;
																																						//while (answer != "Да, конечно, сделал") {
																																						//	std::getline(std::cin, answer);
																																						//}
																																				//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																																				//9.2.2
																																				/*
																																				Задача 2. Купи слона.
																																				Напишите программу-дразнилку “Купи слона”.
																																				Она спрашивает у пользователя, как его зовут, затем отвечает
																																				“%username%, купи слона!”. Дальше, что бы он ни говорил,
																																				она передразнивает: Все говорят “...”, а ты купи слона!
																																				Так повторяется бесконечно.
																																				Пример
																																				- Хорошо, давай куплю.
																																				- Все говорят “Хорошо, давай куплю.”, а ты купи слона!
																																				*/
																																				//		std::string username;
																																				//		std::string userline;
																																				//		std::cout << "Привет, как тебе зовут? ";
																																				//		std::cin >> username;
																																				//		std::cout << username << ", купи слона. \n";
																																				//		std::cin >> userline;
																																				//		
																																				//		
																																				//		while (userline != "хорошо") {
																																				//			std::cout << "Все говорят " << userline << " " << ",а ты купи слона" << "\n";
																																				//			//std::cin.get();
																																				//			//std::getline(std::cin, userline);
																																				//			
																																				//
																																				//		}
																																		//БАГ СИ++ УДОЛИТЬ ЕГО


																																		//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																																		//9.2.3
																																		/*
																																		Задача 3. Таблица степеней.
																																		Напишите программу, которая выводила бы N
																																		первых степеней числа К. Посмотрите, что случится, если N или K будут достаточно большими.
																																		*/
																																		//int N = 0;
																																		//int K;
																																		//std::cout << "Введите число: ";
																																		//std::cin >> K;
																																		//std::cout << "Введите степень числа: ";
																																		//std::cin >> N;
																																		//int result = K;
																																		//int n = 0;
																																		//while (n < N) {
																																		//	std::cout << result << "\n";
																																		//	result *= K;
																																		//	n++;
																																		//}

																																//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																																//9.2.4
																																/*
																																Задача 4. Напоминалка.

																																Василий — очень ответственный менеджер, но очень забывчивый.
																																Иногда он пьет воду несколько раз подряд, потому что забыл, что только что пил.
																																Напишите для него программу-напоминалку. В самом начале программа спрашивает,
																																сколько раз ему напомнить, а затем нужное количество раз выводит
																																“Вы хотели не забыть о чем-то”.
																																Усложнение: добавьте возможность ввести фразу-напоминалку,
																																чтобы можно было напоминать о чем-то конкретном.
																																*/
																																//int N;
																																//std::string remind;
																																//std::cout << "Сколько раз напомнить? ";
																																//std::cin >> N;
																																//std::cout << "Что напомнить? ";
																																//std::cin.get();
																																//std::getline(std::cin, remind);
																																//int counter = 0;
																																//while (counter < N)
																																//{
																																//	std::cout << "Напоминание номер " << counter << " " << remind << "\n";
																																//	counter++;
																																//}
																														//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																														//9.2.5
																														/*
																														Задача 5. Банкомат 3.0.

																														В банке ПлюсПлюсБанк тестируют новую систему пин-кодов на банкоматы.
																														Теперь вместо фиксированного пин-кода пользователь должен ввести 4 числа.
																														Если их сумма оказывается равна 42, пользователь может продолжать работу.
																														Напишите программу, которая спрашивает у пользователя 4 числа и
																														отвечает “Ввод корректный”, если их сумма равна 42, и “Ввод некорректный,
																														попробуйте еще раз” в противном случае. Так повторяется бесконечно.
																														*/
																														//int number = 0;
																														//int first;
																														//int two;
																														//int three;
																														//int four;
																														//int good=0;
																														//do {
																														//	std::cout << "Приветствуем в банкомате ПлюсПлбсБанк \n";
																														//	std::cout << "Введите 1 число пин-кода: ";
																														//	std::cin >> first;
																														//	std::cout << "Введите 2 число пин-кода: ";
																														//	std::cin >> two;
																														//	std::cout << "Введите 3 число пин-кода: ";
																														//	std::cin >> three;
																														//	std::cout << "Введите 4 число пин-кода: ";
																														//	std::cin >> four;
																														//	if (first + two + three + four == 42)
																														//	{
																														//		good = 1;
																														//	}
																														//	else std::cout << "Ввод неккоректный \n";
																														//} while (good == 0);
																														//std::cout << "Ввод корректный ";
																												//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																												//9.2.6
																												/*
																												Задача 6. Сумма чисел.
																												У бухгалтера сломались счеты.
																												Напишите программу, которая считала бы сумму вводимых чисел.
																												В начале у бухгалтера спрашивают, сколько чисел тот хочет сложить,
																												затем нужное количество раз просят ввести число и в конце выводят получившуюся сумму.
																												*/
																												//int numberCount;
																												//int counter = 0;
																												//int summa = 0;
																												//int number = 0;
																												//std::cout << "Сколько сложить нужно? ";
																												//std::cin >> numberCount;
																												//while (counter < numberCount) {
																												//	std::cout << "Введите число: ";
																												//	std::cin >> number;
																												//	summa += number;
																												//	counter++;
																												//}
																												//
																												//std::cout << "Сумма чисел = " << summa;
																										//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																										//9.3.1
																										/*
																										Задача 1. Банкомат 4.0.

																										В банке ПлюсПлюсБанк решили улучшить новую систему пин-кодов на банкоматы.
																										Пользователям оказалось неудобно вводить 4 отдельных числа. Перепишите программу так,
																										чтобы пользователь вводил число любой длины, а дальше все то же самое: если сумма
																										цифр числа оказывается равна 42, пользователь может продолжать работу.
																										Напишите программу, которая спрашивает у пользователя число и отвечает
																										“Ввод корректный”, если сумма его цифр равна 42, и “Ввод некорректный”
																										в противном случае. При этом у пользователя есть только одна попытка ввести
																										корректное число.
																										*/
																										//int number = 0;
																										//int first;
																										//int two;
																										//int three;
																										//int four;
																										//int good = 0;
																										//do {
																										//	std::cout << "Приветствуем в банкомате ПлюсПлбсБанк \n";
																										//	std::cout << "Введите 1 число пин-кода: ";
																										//	std::cin >> first;
																										//	std::cout << "Введите 2 число пин-кода: ";
																										//	std::cin >> two;
																										//	std::cout << "Введите 3 число пин-кода: ";
																										//	std::cin >> three;
																										//	std::cout << "Введите 4 число пин-кода: ";
																										//	std::cin >> four;
																										//	if (first + two + three + four == 42)
																										//	{
																										//		std::cout << "Ввод корректный ";
																										//		break;
																										//	}
																										//	else {
																										//		std::cout << "Ввод неккоректный ";
																										//		break;
																										//	}
																										//} while (good == 0);
																								//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																								//9.3.2
																								/*
																								Задача 2. Кадастровые проблемы.
																								В столице программистов на квадратные участки дается скидка.
																								А так как работать с целыми числами программисты начинают раньше, то и участки,
																								площадь которых является точным квадратом (например, 25 или 49), являются самыми
																								востребованными. Напишите программу, которая проверяет, является ли введенная
																								площадь участка точным квадратом. Самый большой участок в городе имеет площадь
																								в 1 000 000 м2.
																								*/

																								//int square;
																								//std::cout << "Введите площадь участка: ";
																								//std::cin >> square;
																								//int counter = 0;
																								//std::cout << "----Рассчитываем и проверяем на точный квадрат----\n";
																								//while(counter!=1000000) {
																								//	
																								//	std::cout << counter << " * " << counter << " = " << counter * counter << "\n";
																								//	
																								//	if (counter * counter == square)
																								//	{
																								//		std::cout << "Точный квадрат!";
																								//		break;
																								//	}
																								//	else if (counter*counter > 1000000)
																								//	{
																								//		std::cout << "Не точный квадрат!";
																								//		break;
																								//	}
																								//	
																								//	counter++;
																								//}

																						//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																						//9.3.3
																						/*
																						Задача 3. Кожаный мешок.
																						На этот раз нужно написать фрагмент кода для прошивки робота.
																						Как мы знаем, роботы понимают только нули и единицы, других цифр для
																						них не существует. Напишите программу, которая проверяет,
																						состоит ли число только из нулей и единиц.
																						*/
																						//int number;
																						//std::cout << "Введите число: ";
																						//std::cin >> number;
																						//int digit = 0;
																						//while (number>0) {
																						//	digit = number % 10;
																						//	if (digit > 1)
																						//	{
																						//		std::cout << "Число";
																						//		break;
																						//	}
																						//	else if (number == 0 || number == 1)
																						//	{
																						//		std::cout << "Единички и нолики";
																						//		break;
																						//	}
																						//	number /= 10;
																						//	
																						//}
																				//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																				//9.3.4
																				/*
																				Задача 4. Военное время.
																				Во времена Второй Мировой в штабах использовались стеклянные доски.
																				С одной их стороны специальные люди писали сводки с фронта, а с другой
																				генералы их читали. Как вы понимаете, для генералов текст выглядел зеркально
																				отраженным, поэтому специальных людей учили писать задом наперед.
																				Напишите программу, упрощающую им жизнь: она должна выводить введенное
																				число задом наперед.
																				*/
																				//int N;
																				//int M = 0;
																				//std::cout << "Введите число, которое надо перевернуть: ";
																				//std::cin >> N;
																				//int digital;
																				//while (N) {
																				//	digital = N % 10;
																				//	N /= 10;
																				//	M *= 10;
																				//	M += digital;
																				//}
																				//std::cout << "Переворот!!! " << M;
																	//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																	//9.5.1.
																	/*
																	Задача 1. Кукушка.
																	Напишите программу, которая имитировала бы часы с кукушкой.
																	В начале работы она спрашивает, который час, а затем нужное количество
																	раз пишет “Ку-ку!”. При выполнении задания необходимо обеспечить контроль
																	ввода (например, количество часов не может быть отрицательным).
																	*/
																	//int hour;
																	//std::string kuku = "Ку-ку!";
																	//std::cout << "Введите какой час? ";
																	//std::cin >> hour;
																	//int counter = 0;
																	//while (hour > 0 && counter < hour && hour<=12) {
																	//	std::cout << counter << " " << kuku << "\n";
																	//	counter++;
																	//}
															//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
															//9.5.2
															/*
															Задача 2. Коллекторы.
															Напишите робота для коллекторов. В самом начале он спрашивает имя должника
															и сумму долга, а затем начинает требовать у него погашения долга до тех пор,
															пока он не введет нужную сумму (равную сумме долга или больше).
															Пример сообщения: “Василий, ваша задолженность составляет 100 рублей.
															Сколько рублей вы внесете прямо сейчас, чтобы ее погасить?”.
															После погашения долга сообщите об этом пользователю и поблагодарите его.
															Обеспечьте контроль ввода.
															*/

															//std::string nameDebtor;
															//int amountDebt;
															//int paymentDebtor = 0;
															//std::cout << "Назовите имя должника: ";
															//std::cin >> nameDebtor;
															//std::cout << "Введите сумму долга: ";
															//std::cin >> amountDebt;
															//while (paymentDebtor < amountDebt) {
															//	std::cout << nameDebtor << ", ваша задолженность составляет " << amountDebt << ". Сколько рублей вы внесёте прямой сейчас? ";
															//	std::cin >> paymentDebtor;
															//	amountDebt -= paymentDebtor;
															//}

													//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
													//9.5.3
													/*
													Задача 3. Слишком большие числа.
													У неудачливого бухгалтера все опять идет наперекосяк:
													ему приносят такие большие счета, что числа не помещаются на бумаге.
													Напишите программу, которая считала бы для него, сколько цифр (знаков)
													во вводимом числе.
													*/
													//int number;
													//std::cout << "Введите число: ";
													//std::cin >> number;
													//int i = 0;
													//int digital;
													//while (number > 0) {
													//	digital = number % 10;
													//	i++;
													//	number /= 10;
													//}
													//std::cout << "Количество знаков: " << i;

											//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
											//9.5.4
											/*
											Задача 4. Коллекторы 2.0.
											Улучшите робота-коллектора. Теперь сумма долга должна уменьшаться,
											если пользователь ввел сумму, меньшую чем сумму долга.
											Также обеспечьте контроль ввода. Если пользователь внес большую сумму,
											чем требуется для погашения, выведите сообщение о том, какой у него остаток
											на счету после такой операции.
											*/
											//std::string nameDebtor;
											//int amountDebt;
											//int paymentDebtor = 0;
											//std::cout << "Назовите имя должника: ";
											//std::cin >> nameDebtor;
											//std::cout << "Введите сумму долга: ";
											//std::cin >> amountDebt;
											//bool debtor = false;
											//while (!debtor) {
											//	std::cout << nameDebtor << ", ваша задолженность составляет " << amountDebt << ". Сколько рублей вы внесёте прямой сейчас? ";
											//	std::cin >> paymentDebtor;
											//	if (debtor = paymentDebtor > amountDebt){
											//		std::cout << "У вас остаток на счету: " << -(amountDebt-paymentDebtor) << "\n";
											//	} else amountDebt -= paymentDebtor;
											//}
											//std::cout << "Спасибо!";

										//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
										//9.5.5
										/*
										Задача 5. Счастливый билетик.
										В старину, когда даже в столице билеты в общественном транспорте
										выдавали контролеры, существовало поверье: если на билете сумма
										первых трех цифр в номере билета равна сумме последних трех,
										то это к удаче. Напишите программу, которая получала бы на входе шестизначный
										номер билета и выводила, счастливый ли это билет или нет. К примеру,
										билеты 666 666 и 252 135 - счастливые, а 123 456 - нет.
										*/
										//int number;
										//std::cout << "Номер вашего билетика: ";
										//std::cin >> number;
										//int numberBilet = number;
										//int leftSum = 0;
										//int rightSum = 0;
										//bool good = false;
										//int counter = 0;
										//while (!good) {
										//	if (counter < 3) {
										//		rightSum += number % 10;
										//	}
										//	else if (counter >= 3 && counter <= 6) {
										//		leftSum += number % 10;
										//	}
										//	else if (good = rightSum == leftSum) {
										//		std::cout << "Билет под номером: "<< numberBilet <<". Счастливый!";
										//	}
										//	else {
										//		std::cout << "Билет под номером: " << numberBilet << ". Несчастливый!";
										//		good = true;
										//	}
										//	counter++;
										//	number /= 10;
										//}

								//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
								//9.5.6
								/*
								Задача 6. Степень двойки.
								Напишите программу, которая проверяет, является ли данное число степенью двойки.
								Например, степенями двойки являются числа 1, 2, 4, 8, 16, 32 и так далее.
								Не забудьте, что числа больше чем 2147483647 в переменных типа int недопустимы.
								Программа должна быть короткой. Решение с ручным перебором всех вариантов
								через if не будет засчитано.
								*/
								//int number;
								//std::cout << "Введите число: ";
								//std::cin >> number;
								//int result = 1;
								//bool flag = false;
								//int i = 0;
								//while (!flag && number<2147483647) {
								//	if (flag = result == number) {
								//		std::cout << "Число 2"  << " в степени " << i << " = " << number;
								//	}
								//	else if(result>number){
								//		std::cout << "Число " << number << " не является степенью от 2";
								//		flag = true;
								//	}
								//	result *= 2;
								//	i++;
								//}
						//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
						//9.5.7
						/*
						Задача 7. Числа Фибоначчи.
						Числами Фибоначчи называется следующая последовательность чисел:
						1, 1, 2, 3, 5, 8, 13 и так далее (первое число равно 1, второе число
						равно 1, а каждое следующее равно сумме двух предыдущих).
						Напишите программу, которая по данному номеру N выводит N-е число
						этой последовательности (если оно не превосходит 2147483647, конечно же).
						Обеспечьте контроль ввода.
						*/
						//int numberN;
						//int fibonachiPred = 0;
						//int fibonachiNext = 1;
						//std::cout << "Какой номер числа вывести? ";
						//std::cin >> numberN;
						//int i = 0;
						//while (i<numberN && numberN < 2147483647 && numberN!=0) {
						//	fibonachiNext += fibonachiPred;
						//	fibonachiPred = fibonachiNext - fibonachiPred;
						//	i++;
						//}
						//std::cout << "Число по последовательности " << numberN << " = " << fibonachiPred;

				//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				//9.5.8
				/*
				Задача 8. Сокращение дроби.
				Пользователь вводит числа M и N. Напишите программу, которая преобразует
				дробь M/N к несократимому виду и выдает получившийся результат.
				Необходимо обеспечить контроль ввода.
				Например, при введенных числах 4 6 результатом должно быть 2/3.
				При числах 25 40 результатом должно быть 5/8.
				*/
				//int N;
				//int M;
				//std::cout << "Введите число 1: ";
				//std::cin >> N;
				//std::cout << "Введите число 2: ";
				//std::cin >> M;
				//int first = N;
				//int two = M;
				//int save = 0;
				//while (first != two) {
				//	if (first > two) {
				//		save = first;
				//		first = two;
				//		two = save;
				//	}
				//	two = two - first;
				//}
				//std::cout << "НОД: " << first;
				//std::cout << "Дробь приняла вид: " << N / first << "/" << M / first << "\n";
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//9.5.9
		/*
		Вклад в банке составляет X рублей. Ежегодно он увеличивается
		на P процентов, после чего дробная часть копеек отбрасывается.
		Определите, через сколько лет вклад составит не менее Y рублей.
		Напишите программу, которая по данным числам X, Y, P определяет,
		сколько лет пройдет, прежде чем сумма достигнет значения Y.
		*/
		//int X;
		//int P;
		//int Y;
		//int year = 0;
		//std::cout << "Введите вклад: ";
		//std::cin >> X;
		//std::cout << "Какой процент? ";
		//std::cin >> P;
		//std::cout << "Сколько нужно? ";
		//std::cin >> Y;
		//while (X < Y) {
		//	X += (X * P) / 100;
		//	year++;
		//}
		//std::cout << "Достигнет суммы "<< Y << " с процентом " << P << " при вкладе " <<X<< " через " <<year << " лет.";

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//9.5.10
/*
Задача 10. Угадай число - наоборот.
Напишите программу, которая угадывает число,
задуманное пользователем. Число загадывается в диапазоне
от 0 до 63. Программа задает вопросы вида “ваше число больше такого-то?”
и на основе ответов пользователя “да” или “нет” угадывает число.
*/
//int userNumber;
//std::string answer;
//int compAnswer;
//int maxNumber = 63;
//int minNumber = 0;
//std::cout << "Какое число загадаем? Загадываем в диапазоне от 0 до 63! ";
//std::cin >> userNumber;
//while (true) {
//	compAnswer = (minNumber + maxNumber) / 2;
//	if (minNumber == maxNumber) {
//		break;
//	}
//	std::cout << "Ваше число > " << compAnswer <<". ";
//	std::cin >> answer;
//	if (answer == "да") {
//		minNumber = compAnswer;
//	}
//	else if (answer == "нет") {
//		maxNumber = compAnswer;
//	}
//	else {
//		std::cout << "Что это такое?";
//	}
//}
//std::cout << "Поздравляю!" << compAnswer << " = " << userNumber;


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//10.2.1
/*
Задача 1. Кукушка (цикл for).
Перепишите программу из прошлого модуля, используя цикл for.
Напишите программу, которая имитировала бы часы с кукушкой.
В начале работы она спрашивает, который час,
а затем нужное количество раз пишет “Ку-ку!”.
Обеспечьте контроль ввода (например, количество часов не может быть отрицательным).
*/
//int hour;
//std::string kuku = "Ку-ку!";
//std::cout << "Введите какой час? ";
//std::cin >> hour;
//for (int i = 1; i <= hour && hour>0 && hour<12; i++)
//	std::cout << i << " " << kuku << "\n";
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//10.2.2
/*
Задача 2. Сумма чисел (цикл for).
Перепишите программу из прошлого модуля, используя цикл for.
У бухгалтера сломались счеты.
Напишите программу, которая считала бы сумму вводимых чисел.
В начале у бухгалтера спрашивают, сколько чисел тот хочет сложить,
затем нужное количество раз просят ввести число и в конце выводят получившуюся сумму.
*/
//int numberBugh;
//std::cout << "Сколько складывать чисел? ";
//std::cin >> numberBugh;
//int sum = 0;
//int timeResult;
//for (int i = 1; i <= numberBugh; i++) {
//	std::cout << i << ". Введите число: ";
//	std::cin >> timeResult;
//	sum += timeResult;
//}
//std::cout << "Сумма чисел: " << sum;
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//10.2.3
/*
Задача 3. Таблица умножения.
Первоклассник Вася родился в век высоких технологий и не умеет умножать
в уме. Он боится контрольной работы на знание таблицы умножения,
поэтому он решил написать на С++ программу-шпаргалку.
Вася хочет ввести число, а программа должна выдать
таблицу умножения для этого числа. Помогите Васе написать программу.
*/
//int numberUser;
//std::cout << "Васёк, Васёк. Для какого числа таблицу тебе вывести? ";
//std::cin >> numberUser;
//for (int i = 1; i <= 10;i++) {
//	std::cout << i << " * " << numberUser << " = " << i * numberUser << "\n";
//}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//10.2.4
/*
Задача 4. Сумма нечётных.
Напишите программу, похожую на разобранный нами пример с суммой чисел,
но только теперь нужно вычислить сумму всех нечётных чисел,
лежащих в диапазоне от единицы до указанного пользователем числа включительно.
*/
//int numberUser;
//std::cout << "Введите число: ";
//std::cin >> numberUser;
//int sum =0;
//for (int i = 1; i <= numberUser; i = i + 2) {
//	sum += i;
//}
//std::cout << "Сумма нечётных: " << sum;

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//10.2.5
/*
Задача 5. Начальник (цикл for).
Перепишите программу из прошлого модуля, используя цикл for.
Напишите программу для робота-начальника. Он спрашивает у пользователя,
выполнил ли он задание, которое тот выдавал вчера,
и продолжает это делать до тех пор, пока пользователь
не ответит ему “Да, конечно, сделал”. Для большей реалистичности
в конце пусть робот-начальник пожалуется: “Ну почему
тебя нужно спрашивать N раз?”, где N — это число попыток,
которые были потрачены пользователем, прежде чем он ввёл правильный ответ.
Напоминаем: чтобы считать строку с пробелами, воспользуйтесь
функцией std::getline(std::cin, line);
*/
//int Ntry = 0;
//std::string answerUser;
//for (int i = 1; answerUser != "Да, конечно, сделал"; i++) {
//	std::cout << "Ты сделал вчерашнюю работу? ";
//	std::getline(std::cin, answerUser);
//	Ntry = i;
//}
//std::cout << "Ну почему тебя нужно спрашивать " << Ntry << " раз";

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//10.3.1
/*
Задача 1. Пароль (цикл for).
Перепишите программу из прошлого модуля, только теперь вместо
цикла while используйте цикл for.
Программа просит пользователя ввести пароль. Если пароль неверный,
программа просит сделать это снова, и так до тех пор,
пока пользователь не введёт правильный пароль.
*/
//std::string userPassword;
//std::string rightUserPassword = "1234";
//for (int i = 0; userPassword != rightUserPassword;i++) {
//	std::cout << "Введите пароль: ";
//	std::cin >> userPassword;
//}
//std::cout << "Пароль верный!";
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//10.3.2
/*
Задача 2. Кадастровые проблемы (цикл for).
Перепишите программу из прошлого модуля, только теперь вместо
цикла while используйте цикл for. В столице программистов
на квадратные участки дается скидка. А так как работать с целыми
числами программисты начинают раньше, то и участки,
площадь которых является точным квадратом (например, 25 или 49),
являются самыми востребованными. Напишите программу, которая проверяет,
является ли введенная площадь участка точным квадратом.
Самый большой участок в городе имеет площадь в 1 000 000 м2.
*/
//int square;
//std::cout << "Введите площадь участка: ";
//std::cin >> square;
//std::cout << "----Рассчитываем и проверяем на точный квадрат----\n";
//for (int i = 1; true; i++) {
//	if ((i * i) == square)
//	{
//		std::cout << "Квадрат точный!";
//		break;
//	}
//	else if (i * i != square && i*i>1000000) {
//		std::cout << "Квадрат не точный!";
//		break;
//	}

//	}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//10.3.2
/*
Задача 3. Крепкий орешек.
Мы разрабатываем пошаговую игру по мотивам боевика.
Игрок — главный герой и должен обезвредить бомбу,
которая взорвётся через 10 итераций цикла.
Программа спрашивает пользователя хочет ли он перерезать провод сейчас.
Если ответ “нет”, то счетчик бомбы уменьшается.
Если он достиг нуля, то программа выдаёт сообщение “Бомба взорвалась”,
а если не достиг, то программа вновь переспрашивает,
не хочет ли игрок обезвредить бомбу, и сообщает,
сколько времени осталось до взрыва.
Если ответ “да”, то программа выводит
на экран сообщение о том, что бомба обезврежена и
сколько шагов оставалось до взрыва. Используйте цикл for.
*/
//int bum = 10;
//std::string answer;
//for (int i = bum; true ;i--) {
//	std::cout << "До взрыва осталось: " << i << " минут.";
//	std::cout << "Хотите перерезать провод сейчас? ";
//	std::cin >> answer;
//	if (answer == "да") {
//		std::cout << "Bomb has been defused ";
//		break;
//	}
//	else if (i == 0){
//		std::cout << "Bomb BOOOOOOOOOOOOOM! ";
//		break;
//	}
//}


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//10.5.1
/*
Задача 1. Инопланетная пища.
Ваш космический корабль потерпел крушение на пустынной планете.
Еда здесь не растёт, но вы спасли из обломков 100-килограммовый мешок гречки.
Из прошлого опыта вы знаете, что если будете экономно питаться,
то у вас будет уходить по 4 килограмма гречки в месяц.
Чтобы прикинуть гречневый бюджет, вы решили написать программу,
которая выведет информацию о том, сколько килограммов
гречки у вас должно быть в запасе через месяц, два и так далее,
пока она не закончится. Используйте цикл for.
*/
//
		//for (int month = 1, grechkaKG = 100, timeKg = 4; grechkaKG > 0;grechkaKG-=4,timeKg+=4, ++month) {
		//	std::cout << month << " месяц нужно "<<timeKg<<" гречки, останется: " << grechkaKG-4 << "\n";
		//}
		//std::cout << "Гречка кончилась!";

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//10.5.2
/*
Задача 2. Кофемашина.
Инженеры компании “Спейс Инжиниринг” не могут продуктивно работать
без кофе. Недавно в их кофемашину случайно попал космический луч и
повредил программу-прошивку. Вас умоляют помочь.
Кофемашина умеет готовить два напитка: американо и латте.
Для американо требуется 300 мл воды, а для латте 30 мл воды и 270 мл молока.
Напишите программу, которая спрашивает у пользователя,
сколько всего миллилитров молока и воды залито в кофемашину,
после чего начинает обслуживание, спрашивая,
какой напиток хочет очередной посетитель.
Пользователь выбирает один из двух напитков,
программа отвечает одним из
трёх вариантов: “Ваш напиток готов”, “Не хватает воды” или “Не хватает молока”,
после чего переходит к обслуживанию следующего посетителя.
Выберите наиболее удобный для написания программы цикл. Обеспечьте контроль ввода.
*/

//int milk;
//int water;
//std::cout << "Сколько миллилитров залито воды залито в машину? ";
//std::cin >> water;
//std::cout << "Сколько миллилитров залито молока в машину? ";
//std::cin >> milk;
//std::string answerUser;
//for (;true;) {
//	std::cout << "Какой кофе вы хотите? - ";
//	std::cin >> answerUser;
//	if (answerUser == "американо" || answerUser == "Американо") {
//		if (water < 300) {
//			std::cout << "“Не хватает воды!\n";
//		}
//		else {
//			water -= 300;
//			std::cout << "\nВаш напиток готов!\n\n";
//		}
//	}
//	else if (answerUser == "латте" || answerUser == "Латте") {
//		if (water < 30) {
//			std::cout << "“Не хватает воды!\n";
//		}
//		else if (milk < 270) {
//			std::cout << "“Не хватает молока!\n";
//		}
//		else {
//			water -= 30;
//			milk -= 270;
//			std::cout << "Ваш напиток готов!\n";
//		}
//	}
//	else {
//		std::cout << "Такого у нас нету\n";
//	}
//}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//10.5.3
/*
Задача 3. Улучшенная кофемашина.
Сотрудники “Спейс Инжиниринг” всё ещё не очень довольны.
Часто бывает, что они выбирают напиток, и только потом видят,
что не хватает какого-то ингредиента.
Модифицируйте программу так, чтобы если молока и воды не хватает
ни на один из видов напитков, программа выдавала отчёт и завершалась.
В отчёте должно быть написано, что ингредиенты подошли к концу,
указан остаток воды и молока в машине, а также сколько всего
было приготовлено чашек американо и латте за эту смену.
Обеспечьте контроль ввода.
*/

//int milk;
//int water;
//std::cout << "Сколько миллилитров залито воды залито в машину? ";
//std::cin >> water;
//std::cout << "Сколько миллилитров залито молока в машину? ";
//std::cin >> milk;
//std::string answerUser;
//for (int counterLatte=0, counterAmeric = 0;true;) {
//	std::cout << "Какой кофе вы хотите? - ";
//	std::cin >> answerUser;
//	if (answerUser == "американо" || answerUser == "Американо") {
//		if (water < 300) {
//			std::cout << "Не хватает воды!\n";
//		}
//		else {
//			water -= 300;
//			std::cout << "\nВаш напиток готов!\n\n";
//			counterLatte++;
//		}
//	}
//	else if (answerUser == "латте" || answerUser == "Латте") {
//		if (water < 30) {
//			std::cout << "Не хватает воды!\n";
//		}
//		else if (milk < 270) {
//			std::cout << "Не хватает молока!\n";
//		}
//		else {
//			water -= 30;
//			milk -= 270;
//			std::cout << "Ваш напиток готов!\n";
//			counterAmeric++;
//		}
//	}
//	else {
//		std::cout << "Такого у нас нету\n";
//	}
//	if (water < 30 && milk < 270) {
//		std::cout << "Отчёт: Осталось молока: " << milk << ".\nОсталось воды: "<<water<<"\n";
//		std::cout << "Количество чашек американо за сегодня: " << counterAmeric;
//		std::cout << "\nКоличество чашек латте за сегодня: " << counterLatte;
//		break;
//	}
//}
//
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//10.5.4
/*
Задача 4. Красный Марс.
В “Спейс Инжиниринг” были впечатлены тем, как вы справились с кофемашиной
и решили отдать вам на аутсорс разработку программы для нового
робота-разведчика поверхности Марса. Это первый прототип,
поэтому он тестируется в прямоугольном помещении размером 15 на 20 метров.
Марсоход высаживается в центре комнаты, после чего управление
им передаётся оператору — пользователю вашей программы.
Программа спрашивает, в какую сторону оператор хочет направить робота:
север (клавиша W), юг (клавиша S), запад (клавиша A) или восток (клавиша D).
Оператор делает выбор, марсоход перемещается на 1 метр в эту сторону
и программа сообщает новую позицию марсохода. Если марсоход упёрся в
стену, то он не должен пытаться перемещаться в сторону стены, в этом
случае его позиция не меняется.
*/
//int x = 15;
//int y = 20;
//std::string direction;
//int xCurrent;
//int yCurrent;
//xCurrent = x / 2;
//yCurrent = y / 2;
//for (; true;) {
//	std::cout << "[Программа]: Марсоход находится на позиции " << xCurrent << ", " << yCurrent << ", введите команду:\n";
//	std::cout << "[Оператор]: ";
//	std::cin >> direction;
//	if (direction == "W" && yCurrent < y) {
//		yCurrent++;
//	}
//	else if (direction == "S" && yCurrent > 0) {
//		yCurrent--;
//	}
//	else if (direction == "D" && xCurrent < x) {
//		xCurrent++;
//	}
//	else if (direction == "A" && xCurrent > 0) {
//		xCurrent--;
//	}
//	else std::cout << "Не верная команда \n";
//}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//10.5.5
/*
Задача 5. Биолаборатория.
В борьбе со всемирной эпидемией королебактерий исследователи компании
“Терран Биотех” открыли новый антибиотик. Напишите программу,
помогающую протестировать его. В чашку Петри исследователи кладут
N бактерий и добавляют X капель антибиотика.
Известно, что число королебактерий в чашке Петри увеличивается в
два раза каждый час, а каждая капля антибиотика в первый
час убивает 10 бактерий, во второй час 9 бактерий, в следующий
8 и так далее, пока антибиотик не перестанет действовать.
Заметьте, что сначала число королебактерий увеличивается,
а затем действует антибиотик. Пользователь вашей программы вводит N и X,
а программа печатает на экране сколько бактерий останется в чашке
Петри в конце каждого часа до тех пор, пока не закончатся
бактерии или антибиотик не перестанет действовать.
Судьба человечества в ваших руках. Обеспечьте контроль ввода.
*/
//int N;//кол-во бактерий
//int X;//капли антибиотика
//std::cout << "Сколько бактерий? ";
//std::cin >> N;
//std::cout << "Сколько капель антибиотика? ";
//std::cin >> X;
//for (int hour = 0,currentAnti = 10; currentAnti>=0; hour++, currentAnti--) {
//	std::cout << hour << " час. Кол-во бактерий: " << N << "\n";
//	N *= 2;
//	N -= (X * currentAnti);
//	if (N <= 10) {
//		std::cout << "Бактерии уничтожены!";
//		break;
//	}
//}
//std::cout << "Кто-то умер!";
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//10.5.6
/*
Задача 6. Рамка.
Напишите программу, которая рисует с помощью символьной
графики прямоугольную рамку. Для вертикальных линий
используйте символ вертикального штриха “|”, а для
горизонтальных - дефис “-”. Пусть пользователь вводит ширину и высоту рамки.
*/
		//	int width;
		//	int height;
		//	std::cout << "Введите высоту: ";
		//	std::cin >> height;
		//	std::cout << "Введитен ширину: ";
		//	std::cin >> width;
		//	std::string strih1 = "|";
		//	std::string strih2 = " ";
		//	for (int i = 0; i <= height; i++) {
		//
		//		std::cout << strih1;
		//		if (i == 0 || i == height) {
		//			strih2 = "-";
		//		}
		//		else strih2 = " ";
		//		for (int j = 0; j <= width; j++) {
		//			std::cout << strih2;
		//			if (j == width)
		//			{
		//				std::cout << strih1;
		//			}
		//		}
		//		std::cout << "\n";
		//	}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//10.5.7
/*
Задача 7. Координатные оси.
Модифицируйте пример с координатными осями так, 
чтобы в точке их пересечения рисовался знак “+”, 
на верхнем конце вертикальной оси была стрелка вверх “^”, 
а на правом конце горизонтальной оси стрелка вправо “>”. 
Это сделает рисунок более красивым и точным.
*/
		//int width;
		//int height;
		//std::cout << "Введите высоту: ";
		//std::cin >> height;
		//std::cout << "Введитен ширину: ";
		//std::cin >> width;
		//std::string strih1 = "|";
		//std::string strih2 = " ";
		//for (int i = 0; i <= height; i++) {
		//	if (i == (height/2)) {
		//		strih2 = "-";
		//	}
		//	else strih2 = " ";
		//
		//	for (int j = 0; j <= width; j++) {
		//		if (j == width && i == (height/2)) {
		//			strih1 = ">";
		//		}
		//		else if (j == (width / 2) && i == (height / 2)) {
		//			strih1 = "+";
		//		}
		//		else if (i == 0 && j == (width / 2)) {
		//			strih1 = "^";
		//		}
		//		else if (j == (width/2))
		//		{
		//			strih1 = "|";
		//		}
		//		else {
		//			strih1 = " ";
		//		}
		//		std::cout << strih2;
		//		std::cout << strih1;
		//	}
		//	
		//	std::cout << "\n";
		//}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//10.5.8
/*
Задача 8. Автограф разработчика.
Напишите программу, которая печатает на экране ваше имя в прямоугольной рамке. 
Для вертикальных линий используйте символ вертикального штриха “|”, 
а для горизонтальных - дефис “-”.
*/
		//std::string name;
		//std::cout << "Введите ваше имя: ";
		//std::cin >> name;
		//int N;
		//std::cout << "Введите длину имени: ";
		//std::cin >> N;
		//for (int i =1; i <= 3; i++) {
		//	std::cout << "|";
		//	if (i == 2) {
		//		std::cout << name;
		//	}
		//	else {
		//		for (int j = 1; j <= N; j++) {
		//
		//			std::cout << "-";
		//		}
		//	}
		//	std::cout << "|";
		//	std::cout << "\n";
		//}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//10.5.9
/*
Задача 9. Важные объявления.
Нам нужно написать программу для печати важных объявлений. 
Сверху объявления должен располагаться вот такой колонтитул:
Восклицательные знаки всегда располагаются по центру строки,
причём в зависимости от важности объявления количество 
восклицательных знаков может быть разным. Напишите программу, 
которая спрашивает у пользователя сначала общую длину колонтитула 
в символах, потом желаемое количество восклицательных знаков, 
после чего выводит на экран готовую строку. Обеспечьте контроль ввода.
Если невозможно разместить восклицательные знаки ровно по центру,
допускается сдвиг на один символ.
*/
		//int mainLong;
		//int voskLong;
		//std::cout << "Длина колонтитула: ";
		//std::cin >> mainLong;
		//std::cout << "Длина восклицательных знаков: ";
		//std::cin >> voskLong;
		//std::string stroka = "~";
		//for (int i = 0; i <= mainLong; i++) {
		//	
		//	if (i >= ((mainLong / 2) - voskLong) && i <= ((mainLong / 2) + voskLong)) {
		//		stroka = "!";
		//	}
		//	else stroka = "~";
		//
		//	std::cout << stroka;
		//}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//10.5.10
/*
Задача 10. Ёлочка.
Напишите программу, которая выводит на экран равнобедренный 
треугольник, заполненный символами решётки ‘#”. 
Пусть высота треугольника вводится пользователем. Обеспечьте контроль ввода.
*/
		//	int h;
		//	std::cout << "Введите высоту треугольника: ";
		//	std::cin >> h;
		//	std::string triangle = "*";
		//	for (int i = 1; i <= h; ++i) {
		//		int countZvezda = h - i;
		//		for (; countZvezda > 0; --countZvezda) {
		//			std::cout << " ";
		//		}
		//		int j = i * 2 - 1;
		//		for (int j = i * 2 - 1; j > 0; --j)
		//		{
		//			std::cout << "#";
		//		}
		//		std::cout << "\n";
		//}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//10.5.11
/*
Задача 11. Треугольник Паскаля.
Напишите программу, которая выводит на экран 
N первых строк треугольника Паскаля.
N задаётся пользователем с клавиатуры. 
Треугольник Паскаля — это числа, расположенные в виде треугольника,
где по краям стоят единицы, а каждое число внутри 
треугольника равно сумме двух чисел, расположенных над ним. 
Обеспечьте контроль ввода.
Пример (N = 5):
*/
		//int N;
		//int numberPas = 1;
		//std::cout << "Введите высоту: ";
		//std::cin >> N;
		//for(int i=0;i<=N;i++){
		//	numberPas = 1;
		//	for (int j = 1; j < (N - i + 1); j++) {
		//		std::cout << " ";
		//	}
		//	for (int k = 1; k <= i; k++) {
		//		std::cout << numberPas << " ";
		//		numberPas = numberPas * (i - k) / k;
		//	}
		//	std::cout << "\n";
		//}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//11.2.1
/*
Задача 1. Орехи
Араик Вачаганович торгует на рынке орехами и сухофруктами. Товары продаются на развес, 
у каждого есть цена за 100 грамм. Араик пользуется механическими весами 
с гирями, поэтому каждый раз рассчитывает итоговую стоимость продажи на бумаге или в уме. 
Это неудобно: например, если покупатель хочет 265 грамм грецких орехов, 
а 100 грамм стоят 600 рублей, приходится умножать и делить в столбик. 
Напишите простую программу в помощь Араику: он вводит цену товара за 100 грамм и 
итоговый вес покупки, а программа выдаёт стоимость покупки указанного веса.
*/
		//float cost;
		//float cost100gramm;
		//float weightNuts;
		//std::cout << "Введите цену за 100 грамм: ";
		//std::cin >> cost100gramm;
		//std::cout << "Введите вес покупки: ";
		//std::cin>>weightNuts;
		//cost = (cost100gramm / 100) * weightNuts;
		//std::cout << "Цена за " << weightNuts << " орехов = " << cost <<" рублей";
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//11.2.2
/*
Задача 2. ЗОЖ
Лена решила следить за питанием и вести учёт потребляемых белков и углеводов. 
На этикетках продуктов указано содержание белков и углеводов на 100 грамм продукта, 
но обычно упаковка весит меньше или больше 100 грамм. Напишите программу, которая
принимает на вход информацию с упаковки: количество белков и углеводов на 100 грамм и 
массу нетто продукта. На выходе программа сообщает Лене, сколько белков и углеводов
содержится в упаковке с продуктом этого веса.
*/
//float numberOfProteins; //кол-во белков
//float amountOfCarbohydrates; //кол-вол углеводов
//float netWeight; //масса нетто
//std::cout << "Введите кол-во белков на 100 грамм продукта: ";
//std::cin >> numberOfProteins;
//std::cout << "Введите количество углеводов на 100 грамм продукта: ";
//std::cin >> amountOfCarbohydrates;
//std::cout << "Введите массу нетто: ";
//std::cin >> netWeight;
//std::cout << "В упаковке массой нетто: " << netWeight << " \nБелков: " << (numberOfProteins / 100) * netWeight << " грамм\nУглеводов: " << (amountOfCarbohydrates / 100) * netWeight << " грамм";

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//11.2.3
/*
Задача 3. Постоянный покупатель
Иногда к Араику Вачагановичу приходят постоянные покупатели, для которых он делает скидку. 
Для каждого такого клиента скидка своя. Модифицируйте программу из задачи «Орехи»: 
Араик будет вводить цену товара за 100 грамм, вес покупки и размер скидки в процентах, 
а программа должна выводить итоговую стоимость.
*/
//float cost;
//float cost100gramm;
//float weightNuts;
//float discount; //скидка
//std::cout << "Введите цену за 100 грамм: ";
//std::cin >> cost100gramm;
//std::cout << "Введите вес покупки: ";
//std::cin >> weightNuts;
//std::cout << "Введите скидку: ";
//std::cin >> discount;
//cost = (cost100gramm / 100) * weightNuts;
//cost = cost - (cost / 100) * discount;
//std::cout << "Цена за " << weightNuts << " орехов = " << cost << " рублей с учётом скидки: "<<discount;

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//11.3.1
/*
Задача 1. Ку!
Общеизвестно, что на планете Плюк можно купить гравицапу за пол-КЦ или, что то же самое, 
2 200 чатлов. Причем чатлы неделимы и всегда являются целым числом. 
Напишите простую программу-конвертер валют. В программу вводится количество чатлов, 
а она сообщает, сколько это КЦ и сколько гравицап можно купить на эту сумму. Обеспечьте контроль ввода.
*/
//float gravicap;
//float KC;
//int chatli;
//int priceForchatli = 2200;
//std::cout << "Сколько чатлов? ";
//std::cin >> chatli;
//KC = ((float)chatli / (float)priceForchatli)/2;
//gravicap = KC * 2;
//std::cout << chatli << "\nкол-во гравицап: " << gravicap << "\nкол-во КЦ: "<<KC;

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//11.3.2
/*
Задача 2. Компьютерное зрение
Вы участвуете в разработке искусственного интеллекта, который играет в шахматы на доске размером 
0,8 х 0,8 метра. Робот смотрит камерой на доску и видит расположение фигур
в вещественных числах с высокой точностью. Напишите программу: после ввода 
вещественных координат шахматной фигуры программа должна определить, 
в какой клетке доски находится эта фигура. Каждая клетка доски имеет размер 
10х10 сантиметров и целочисленные координаты, состоящие из двух чисел. Например, 
левая верхняя клетка имеет целые координаты (0, 0), справа от неё клетка (1, 0), а снизу (0, 1).
*/
	//float x;
	//float y;
	//while (true){
	//	std::cout << "Введите местоположение фигуры: ";
	//	std::cin >> x;
	//	std::cin >> y;
	//	if (x < 0 || x>1 || y < 0 || y>1) {
	//		std::cout << "Не верно повторите попытку!\n";
	//	}else std::cout << "Фигура находится в клетке (" << (int)(x * 10) << ", " << (int)(y * 10) << ")\n";	
	//}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//11.3.3
/*
Задача 3. Метеостанция
Для удобства работы сотрудников международной метеостанции каждый день нужно 
распечатывать различные таблицы соответствия градусов по шкалам Цельсия и 
Фаренгейта. Напишите программу, которая принимает на вход три целых числа 
в градусах Цельсия: нижняя граница температуры, верхняя граница температуры и шаг. 
Программа выводит на экран таблицу соответствия градусов Цельсия градусам Фаренгейта 
от нижней до верхней границы с указанным шагом. Обеспечьте контроль ввода. 
Верхняя граница должна печататься, даже если последний шаг «перепрыгнул» её. 
Известно, что 0 °С соответствует 32 °F, а каждый градус Цельсия эквивалентен 1,8 градусам Фаренгейта.
*/
//int upBorder;
//int downBorder;
//int step;
//float celciT = 0.0f;
//float farenT = 32.0f;
//std::cout << "Нижняя граница: ";
//std::cin >> downBorder;
//std::cout << "Верхняя граница: ";
//std::cin >> upBorder;
//std::cout << "Введите шаг: ";
//std::cin >> step;
//std::cout << "C  F\n";
//while (celciT <= upBorder) {
//	if (step > upBorder || downBorder<0) {
//		break;
//	}
//	else {
//		std::cout << celciT << "  " << farenT << "\n";
//		celciT += step;
//		farenT = 32.0f + celciT * 1.8f;
//	}
//}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//11.3.4
/*
Задача 4. Аккуратность
Робот из задачи «Компьютерное зрение» верно определяет клетку, на которой стоят фигуры. 
Но соперник-человек может поставить фигуру не по центру клетки, а со смещением. 
Если во время игры такое смещение станет велико, робот не поймёт, в какой клетке стоит фигура. 
Чтобы избежать этого, робот должен поправлять фигуры на доске, выставляя их по центру клетки. 
Модифицируйте программу «Компьютерное зрение», чтобы она выдавала не только номера клетки с фигурой, 
но и две вещественные поправки: показывала, как передвинуть фигуру по горизонтали и вертикали, 
чтобы она встала по центру своей клетки. Обеспечьте контроль ввода.
*/
//float x;
//float y;
//while (true){
//	std::cout << "Введите местоположение фигуры: ";
//	std::cin >> x;
//	std::cin >> y;
//	if (x < 0 || x>1 || y < 0 || y>1) {
//		std::cout << "Не верно повторите попытку!\n";
//	}
//	else {
//		std::cout << "Фигура находится в клетке (" <<int(x*10)<< ", " <<int(y*10)<< ")\n";
//		std::cout << "Поправьте положение фигуры на "<<"("<< ((int(x*10) + 0.5f) / 10) - x <<" ,"<< ((int(y*10) + 0.5f)/10) - y <<")\n";
//	}
//}

//радар
/*
#include <iostream>
#include <cmath>

int main() {
  float distance, angle;

  std::cout << "Введите расстояние до танка: ";
  std::cin >> distance;
  std::cout << "Введите угол в радианах: ";
  std::cin >> angle;

  float x = std::cos(angle) * distance;
  float y = std::sin(angle) * distance;

  std::cout << "Координаты вражеского танка: ";
  std::cout << x << ", " << y << "\n";
}
*/

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//11.4.1
/*
Задача 4. Аккуратность
Робот из задачи «Компьютерное зрение» верно определяет клетку, на которой стоят фигуры.
Но соперник-человек может поставить фигуру не по центру клетки, а со смещением.
Если во время игры такое смещение станет велико, робот не поймёт, в какой клетке стоит фигура.
Чтобы избежать этого, робот должен поправлять фигуры на доске, выставляя их по центру клетки.
Модифицируйте программу «Компьютерное зрение», чтобы она выдавала не только номера клетки с фигурой,
но и две вещественные поправки: показывала, как передвинуть фигуру по горизонтали и вертикали,
чтобы она встала по центру своей клетки. Обеспечьте контроль ввода.
*/
//float x, y;
//float xT, yT;
//while (true) {
//	std::cout << "Введите местоположения коня:\n ";
//	std::cin >> x;
//	std::cin >> y;
//	std::cout << "Введите местоположения точки на доске:\n ";
//	std::cin >> xT;
//	std::cin >> yT;
//	if (x < 0 || x>1 || y < 0 || y>1 || xT < 0 || xT>1 || yT < 0 || yT>1) {
//		break;
//	}
//	else {
//		x = std::floor(x * 10);
//		y = std::floor(y * 10);
//		xT = std::floor(xT * 10);
//		yT = std::floor(yT * 10);
//		std::cout << "Конь в клетке (" << x << ", " << y << "). Точка в клетке (" << xT << ", " << yT << ").\n";
//		
//		if ((x - 1 == xT && (y - 2 == yT || y + 2 == yT)) || (x - 2 == xT && (y - 1 == yT || y + 1 == yT)) || (x + 1 == xT && (y + 2 == yT || y - 2 == y - 2)) || (x + 2 == xT && (y - 1 == yT || y + 1 == yT))) {
//			std::cout << "Ход получится\n";
//		}
//		else std::cout << "Ход не получится!\n";
//	}
//}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//11.4.2
/*
Задача 2. Автопилот
Одна из базовых частей программы автопилота пассажирских самолётов — контроль угла тангажа. Угол тангажа — 
это угол между продольной осью самолёта и горизонтом. Если тангаж положительный, нос самолёта смотрит вверх, если отрицательный,
нос смотрит вниз и самолёт пикирует. При больших и малых углах тангажа можно потерять управление.
У самолёта SKB-1 допустимый угол тангажа лежит в пределах от -0,28 до 0,28 радиан. Вам поручено написать код, 
который проверяет, лежит ли введённый пользователем угол в этих пределах. Пользователь вводит угол
в градусах. Используйте как можно меньше конструкций if. Обеспечьте контроль ввода.
*/
	//float angelGr;
	//float angelRadian;
	//std::cout << "Введите угол тагнажа в градусах: ";
	//std::cin >> angelGr;
	//angelRadian = std::cos(angelGr);
	//if (angelRadian >= -0.28 && angelRadian <= 0.28) {
	//	std::cout << "Угол безопасен!";
	//}
	//else {
	//	std::cout << "Угол небезопасен!";
	//}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//11.4.3
/*
Задача 3. Лифт
В Объединённых Арабских Эмиратах находится самый высокий небоскрёб Земли — Burj Khalifa.
Он оборудован скоростными пассажирскими лифтами, но вот беда: иногда они дают сбой и 
застревают между этажами. В этом случае известно число H — высота пола остановившейся 
кабины лифта над уровнем земли. Чтобы команда лифтёров знала, куда ей ехать, шейх поручил 
вам написать программу, которая по известному H определяет, на каком этаже находится 
большая часть кабины. Известно, что расстояние между этажами Burj Khalifa равно 3,975 м, 
а этаж на уровне земли имеет номер 1. На ввод программа принимает вещественное число 
H, на экран выводит целое число — номер этажа. Не используйте при решении условный 
оператор, кроме как для обеспечения контроля ввода.
*/
//float H;
//int etaj;
//std::cout << "Введите высоту!";
//std::cin >> H;
//if (H <= 0) {
//	std::cout << "Не верная высота!";
//}
//else {
//	etaj = std::floor(H / 3.975);
//	std::cout << "Лифт на этаже: " << etaj;
//}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//11.4.4
/*
Задача 4. Убийца Photoshop
Вы разрабатываете новый крутой графический редактор. Один из инструментов редактора позволяет делать градиент —
плавный переход между двумя точками разной яркости. Яркость точки определяется целым числом от 0 до 255, 
где 0 — чёрный, 255 — белый, а всё, что между ними — оттенки серого.
Напишите код для расчёта яркости точки градиента между двумя заданными точками. 
Пользователь вводит яркость левой границы градиента, потом яркость правой границы и параметр: 
число от 0 до 1, которое означает интересующую нас точку. Например, если параметр равен 0.5, 
то искомая точка находится ровно посередине между левой и правой границами, если параметр равен 0, 
то искомая точка совпадает с левой границей, и, наконец, если параметр равен 1, то искомая точка 
совпадает с правой границей. Программа должна вывести число — яркость искомой точки. Обеспечьте контроль ввода.
*/
	//int rightBorder;
	//int leftBorder;
	//float position;
	//float brightness;
	//std::cout << "Введите яркость левой границы градиенат: ";
	//std::cin >> leftBorder;
	//std::cout << "Введите яркость правой границы: ";
	//std::cin >> rightBorder;
	//std::cout << "Введите положение точки между границами: ";
	//std::cin >> position;
	//if (leftBorder >= 0 && position >= 0 && position <= 1) {
	//	if (position == 0) {
	//		std::cout << "Яркость точки: " << leftBorder;
	//	}
	//	else if (position == 1) {
	//		std::cout << "Яркость точки: " << rightBorder;
	//	}
	//	else {
	//		brightness = (rightBorder - leftBorder) * position;
	//		std::cout << "Яркость точки: " << brightness;
	//	}
	//}
	//else std::cout << "Неверные данные!";

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//11.6.1
/*
Задача 1. Космический симулятор
Вы пишете симулятор космических полётов. Ваш звездолёт массой m килограмм включает 
двигатель с силой тяги F ньютонов на t секунд. Напишите программу, которая по заданным 
F, m и t покажет, на каком расстоянии от первоначального положения окажется космический корабль через t секунд.
Обеспечьте контроль ввода.
Примечание: космический корабль находится в открытом космосе.
Напоминаем, что расстояние можно рассчитать по формуле:
*/
	//float massa;
	//float F;
	//float t;
	//float distance;
	//std::cout << "Введите m массу: ";
	//std::cin >> massa;
	//std::cout << "Введите F силу: ";
	//std::cin >> F;
	//std::cout << "Введите время t: ";
	//std::cin >> t;
	//if (massa > 0 && F > 0 && t > 0) {
	//	distance = (F / massa) * std::pow(t, 2) / 2;
	//	std::cout << "Корабль от первоначального положения окажется на расстоянии " << distance;
	//}
	//else std::cout << "Неверные данные";

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//11.6.2
/*
Задача 2. Друзья Оушена
Банковский сейф оборудован механическим кодовым замком, состоящим из N крутящихся ручек, 
каждая из которых имеет K положений. Существует только одна комбинация положений всех N ручек, 
которая открывает сейф. Чтобы его открыть, достаточно перебрать все существующие комбинации. 
На проверку одной комбинации уходит в среднем T секунд, где T — вещественное число. 
Напишите программу, которая по заданным N, K и T определяет время, которое потребуется 
для перебора всех комбинаций и гарантированного открытия сейфа. Не используйте циклы. 
Обеспечьте контроль ввода.
*/
	//int N;
	//int K;
	//float T;
	//float timeFull;
	//std::cout << "Введите количество ручек: ";
	//std::cin >> N;
	//std::cout << "Введите количество положений: "
	//std::cin >> K;
	//std::cout << "Введите время проверки одной комбинации: ";
	//std::cin >> T;
	//if (T > 0 && K > 0 && N > 0) {
	//	timeFull = pow(N, K) * T;
	//	std::cout << "Время на проверку: " << timefull;
	//}
	//else std::cout << "Неверные данные";


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//11.6.3
/*
Мы придумываем фэнтезийную онлайн-игру в жанре RPG. В орка стреляют огненными шарами разной 
степени мощности, но у него есть очки здоровья и показатель сопротивляемости магии.
Очки здоровья, сопротивляемость магии и мощность огненного шара — это вещественные 
числа от нуля до единицы включительно. Чем больше мощность, тем больше урон здоровью, 
но чем больше сопротивляемость магии, тем урон меньше. Например, если сопротивляемость 
равна нулю (0%), то будет нанесен урон равный мощности огненного шара. 
Если сопротивляемость равна единице (100%), урон будет равен нулю, даже 
если мощность заклинания максимальна. Напишите программу, в которой пользователь 
сначала задаёт количество здоровья и сопротивляемость магии орка, а после стреляет
в него огненными шарами разной мощности, пока орк не погибнет. Мощность удара 
вводится с клавиатуры с каждым выстрелом. После каждого заклинания программа выводит
на экран итоговый урон от удара, и оставшиеся очки здоровья орка.
Обеспечьте контроль ввода.
*/

float health;
float resist;
float strenghtFireBall;
float damage;
std::cout << "Введите количество здоровья: ";
std::cin >> health;
std::cout << "Введи резист: ";
std::cin >> resist;
while (true) {
	std::cout << "Введите наносимый урон";
	std::cin >> resist;
	if (health > 0 && strenghtFireBall > 0) {
		std::cout << "\nУ вас здоровья: " << health;
		std::cout << "\n драганбол с уроном нанёс вам: " << damage;

	}
	else std::cout << "Неверный ввод!";
}

}
